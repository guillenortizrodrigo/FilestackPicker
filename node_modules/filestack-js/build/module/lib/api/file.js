/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __assign } from "tslib";
import { Filelink } from './../filelink';
import { removeEmpty } from '../utils';
import { FilestackError } from './../../filestack_error';
import { getValidator, MetadataParamsSchema, RetrieveParamsSchema } from './../../schema';
import { FsRequest, FsHttpMethod } from '../request';
/**
 * Remove given file
 *
 * @private
 * @param session
 * @param handle
 * @param security
 */
export var remove = function (session, handle, skipStorage, security) {
    if (!handle || typeof handle !== 'string') {
        throw new FilestackError('A valid Filestack handle is required for remove');
    }
    if (!(session.policy && session.signature) && (!security || !(security.policy && security.signature))) {
        throw new FilestackError('Security policy and signature are required for remove');
    }
    var fileApiUrl = session.urls.fileApiUrl;
    var baseURL = fileApiUrl + "/" + handle;
    var options = {
        key: session.apikey,
        policy: (security && security.policy) || session.policy,
        signature: (security && security.signature) || session.signature,
    };
    if (skipStorage) {
        options.skip_storage = true;
    }
    return FsRequest.delete(baseURL, {
        filestackHeaders: false,
        params: removeEmpty(options),
    });
};
/**
 * Returns file metadata
 *
 * @private
 * @param session
 * @param handle
 * @param opts
 * @param security
 */
export var metadata = function (session, handle, opts, security) {
    if (!handle || typeof handle !== 'string') {
        throw new FilestackError('A valid Filestack handle is required for metadata');
    }
    var validateRes = getValidator(MetadataParamsSchema)(opts);
    if (validateRes.errors.length) {
        throw new FilestackError("Invalid metadata params", validateRes.errors);
    }
    var options = __assign({}, opts);
    options.source_url = options.sourceUrl; // source_url is snake_case
    options.policy = (security && security.policy) || session.policy;
    options.signature = (security && security.signature) || session.signature;
    var baseURL = session.urls.fileApiUrl + "/" + handle + "/metadata";
    return new Promise(function (resolve, reject) {
        FsRequest.get(baseURL, { params: removeEmpty(options), filestackHeaders: false })
            .then(function (res) { return resolve(__assign(__assign({}, res.data), { handle: handle })); })
            .catch(reject);
    });
};
/**
 * Download file to blob or buffer format
 *
 * @param session
 * @param handle
 */
export var download = function (session, handle, security) {
    var fl = new Filelink(handle, session.apikey);
    var policy = (security && security.policy) || session.policy;
    var signature = (security && security.signature) || session.signature;
    if (policy && signature) {
        fl.security({ signature: signature, policy: policy });
    }
    return FsRequest.dispatch(fl.toString(), { method: FsHttpMethod.GET, blobResponse: true });
};
/**
 * Returns file information
 *
 * @private
 * @deprecated
 * @param session
 * @param handle
 * @param options
 * @param security
 */
export var retrieve = function (session, handle, options, security) {
    if (options === void 0) { options = {}; }
    if (!handle || handle.length === 0 || typeof handle !== 'string') {
        throw new FilestackError('File handle is required');
    }
    console.info('Retrieve method is deprecated and it will be removed. Please use metadata or download');
    var validateRes = getValidator(RetrieveParamsSchema)(options);
    if (validateRes.errors.length) {
        throw new FilestackError("Invalid retrieve params", validateRes.errors);
    }
    var requestOptions = __assign({}, options);
    requestOptions.key = session.apikey;
    requestOptions.policy = (security && security.policy) || session.policy;
    requestOptions.signature = (security && security.signature) || session.signature;
    var method = FsHttpMethod.GET;
    if (requestOptions.head) {
        method = FsHttpMethod.HEAD;
        delete requestOptions.head;
    }
    var extension;
    if (requestOptions.extension && requestOptions.extension.length) {
        extension = requestOptions.extension;
        delete requestOptions.extension;
    }
    var metadata;
    if (requestOptions.metadata) {
        if (method === FsHttpMethod.HEAD) {
            throw new FilestackError('Head and metadata options cannot be used together');
        }
        metadata = requestOptions.metadata;
        delete requestOptions.metadata;
    }
    var baseURL = session.urls.fileApiUrl + "/" + handle + (extension ? "+" + extension : '') + (metadata ? '/metadata' : '');
    return new Promise(function (resolve, reject) {
        FsRequest.dispatch(baseURL, {
            method: method,
            filestackHeaders: false,
            params: removeEmpty(requestOptions),
        })
            .then(function (res) { return resolve(method === FsHttpMethod.HEAD ? res.headers : res.data); })
            .catch(reject);
    });
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
