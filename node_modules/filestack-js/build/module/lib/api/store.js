/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __assign } from "tslib";
import { Filelink } from './../filelink';
import { FilestackError } from './../../filestack_error';
import { getValidator, StoreParamsSchema } from './../../schema';
import { FsRequest, FsCancelToken } from '../request';
/**
 * Store given url with options and
 *
 * @param session
 * @param url
 * @param storeOpts
 * @param token
 * @param security
 * @param uploadTags
 * @param workflowIds
 */
export var storeURL = function (_a) {
    var session = _a.session, url = _a.url, storeParams = _a.storeParams, token = _a.token, security = _a.security, uploadTags = _a.uploadTags, headers = _a.headers, workflowIds = _a.workflowIds;
    if (!url || typeof url !== 'string') {
        return Promise.reject(new FilestackError('url is required for storeURL'));
    }
    var validateRes = getValidator(StoreParamsSchema)(storeParams);
    if (validateRes.errors.length) {
        return Promise.reject(new FilestackError("Invalid store params", validateRes.errors));
    }
    session.policy = security && security.policy || session.policy;
    session.signature = security && security.signature || session.signature;
    var filelink = new Filelink(url, session.apikey);
    filelink.store(storeParams);
    if (session.policy && session.signature) {
        filelink.security({
            policy: session.policy,
            signature: session.signature,
        });
    }
    var options = {};
    if (token) {
        var cancelToken = new FsCancelToken();
        token.cancel = cancelToken.cancel.bind(cancelToken);
        options.cancelToken = cancelToken;
    }
    var sources = [url];
    if (headers) {
        sources = [{
                source: url,
                headers: headers,
            }];
    }
    if (workflowIds && workflowIds.length > 0) {
        filelink.addTask('store', { workflows: workflowIds });
    }
    return FsRequest.post(session.urls.processUrl + "/process", {
        apikey: session.apikey,
        sources: sources,
        tasks: filelink.getTasks(),
        upload_tags: uploadTags,
    }, options).then(function (res) {
        if (res.data && res.data.handle) {
            if (res.data.upload_tags) {
                res.data.uploadTags = res.data.upload_tags;
                delete res.data.upload_tags;
            }
            return __assign(__assign({}, res.data), { mimetype: res.data.type });
        }
        throw new FilestackError("Invalid store response " + JSON.stringify(res.data));
    });
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYXBpL3N0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7QUFHSCxPQUFPLEVBQUUsUUFBUSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakUsT0FBTyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFjdEQ7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBRyxVQUFDLEVBU1I7UUFSZixvQkFBTyxFQUNQLFlBQUcsRUFDSCw0QkFBVyxFQUNYLGdCQUFLLEVBQ0wsc0JBQVEsRUFDUiwwQkFBVSxFQUNWLG9CQUFPLEVBQ1AsNEJBQVc7SUFFWCxJQUFJLENBQUMsR0FBRyxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtRQUNuQyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxjQUFjLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDO0tBQzNFO0lBRUQsSUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLGlCQUFpQixDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFakUsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUM3QixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxjQUFjLENBQUMsc0JBQXNCLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FDdkY7SUFFRCxPQUFPLENBQUMsTUFBTSxHQUFHLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDL0QsT0FBTyxDQUFDLFNBQVMsR0FBRyxRQUFRLElBQUksUUFBUSxDQUFDLFNBQVMsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDO0lBRXhFLElBQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkQsUUFBUSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUU1QixJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtRQUN2QyxRQUFRLENBQUMsUUFBUSxDQUFDO1lBQ2hCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtZQUN0QixTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVM7U0FDN0IsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxJQUFJLE9BQU8sR0FBUSxFQUFFLENBQUM7SUFFdEIsSUFBSSxLQUFLLEVBQUU7UUFDVCxJQUFNLFdBQVcsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO1FBQ3hDLEtBQUssQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDcEQsT0FBTyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7S0FDbkM7SUFFRCxJQUFJLE9BQU8sR0FBUSxDQUFFLEdBQUcsQ0FBRSxDQUFDO0lBRTNCLElBQUksT0FBTyxFQUFFO1FBQ1gsT0FBTyxHQUFHLENBQUM7Z0JBQ1QsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsT0FBTyxTQUFBO2FBQ1IsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN6QyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZEO0lBRUQsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxhQUFVLEVBQUU7UUFDMUQsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO1FBQ3RCLE9BQU8sU0FBQTtRQUNQLEtBQUssRUFBRSxRQUFRLENBQUMsUUFBUSxFQUFFO1FBQzFCLFdBQVcsRUFBRSxVQUFVO0tBQ3hCLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBRztRQUNuQixJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDL0IsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDeEIsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7Z0JBQzNDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7YUFDN0I7WUFFRCw2QkFBWSxHQUFHLENBQUMsSUFBSSxLQUFFLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBRztTQUNqRDtRQUVELE1BQU0sSUFBSSxjQUFjLENBQUMsNEJBQTBCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBRyxDQUFDLENBQUM7SUFDakYsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJmaWxlIjoibGliL2FwaS9zdG9yZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggYnkgRmlsZXN0YWNrLlxuICogU29tZSByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFNlY3VyaXR5LCBTZXNzaW9uIH0gZnJvbSAnLi4vY2xpZW50JztcbmltcG9ydCB7IEZpbGVsaW5rLCBTdG9yZVBhcmFtcyB9IGZyb20gJy4vLi4vZmlsZWxpbmsnO1xuaW1wb3J0IHsgRmlsZXN0YWNrRXJyb3IgfSBmcm9tICcuLy4uLy4uL2ZpbGVzdGFja19lcnJvcic7XG5pbXBvcnQgeyBnZXRWYWxpZGF0b3IsIFN0b3JlUGFyYW1zU2NoZW1hIH0gZnJvbSAnLi8uLi8uLi9zY2hlbWEnO1xuaW1wb3J0IHsgRnNSZXF1ZXN0LCBGc0NhbmNlbFRva2VuIH0gZnJvbSAnLi4vcmVxdWVzdCc7XG5pbXBvcnQgeyBVcGxvYWRUYWdzIH0gZnJvbSAnLi91cGxvYWQvZmlsZSc7XG5cbmV4cG9ydCB0eXBlIFN0b3JlVXJsUGFyYW1zID0ge1xuICBzZXNzaW9uOiBTZXNzaW9uO1xuICB1cmw/OiBzdHJpbmc7XG4gIHN0b3JlUGFyYW1zPzogU3RvcmVQYXJhbXM7XG4gIHRva2VuPzogYW55O1xuICBzZWN1cml0eT86IFNlY3VyaXR5O1xuICB1cGxvYWRUYWdzPzogVXBsb2FkVGFncztcbiAgaGVhZGVycz86IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9LFxuICB3b3JrZmxvd0lkcz86IHN0cmluZ1tdXG59O1xuXG4vKipcbiAqIFN0b3JlIGdpdmVuIHVybCB3aXRoIG9wdGlvbnMgYW5kXG4gKlxuICogQHBhcmFtIHNlc3Npb25cbiAqIEBwYXJhbSB1cmxcbiAqIEBwYXJhbSBzdG9yZU9wdHNcbiAqIEBwYXJhbSB0b2tlblxuICogQHBhcmFtIHNlY3VyaXR5XG4gKiBAcGFyYW0gdXBsb2FkVGFnc1xuICogQHBhcmFtIHdvcmtmbG93SWRzXG4gKi9cbmV4cG9ydCBjb25zdCBzdG9yZVVSTCA9ICh7XG4gIHNlc3Npb24sXG4gIHVybCxcbiAgc3RvcmVQYXJhbXMsXG4gIHRva2VuLFxuICBzZWN1cml0eSxcbiAgdXBsb2FkVGFncyxcbiAgaGVhZGVycyxcbiAgd29ya2Zsb3dJZHMsXG59OiBTdG9yZVVybFBhcmFtcyk6IFByb21pc2U8YW55PiA9PiB7XG4gIGlmICghdXJsIHx8IHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBGaWxlc3RhY2tFcnJvcigndXJsIGlzIHJlcXVpcmVkIGZvciBzdG9yZVVSTCcpKTtcbiAgfVxuXG4gIGNvbnN0IHZhbGlkYXRlUmVzID0gZ2V0VmFsaWRhdG9yKFN0b3JlUGFyYW1zU2NoZW1hKShzdG9yZVBhcmFtcyk7XG5cbiAgaWYgKHZhbGlkYXRlUmVzLmVycm9ycy5sZW5ndGgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEZpbGVzdGFja0Vycm9yKGBJbnZhbGlkIHN0b3JlIHBhcmFtc2AsIHZhbGlkYXRlUmVzLmVycm9ycykpO1xuICB9XG5cbiAgc2Vzc2lvbi5wb2xpY3kgPSBzZWN1cml0eSAmJiBzZWN1cml0eS5wb2xpY3kgfHwgc2Vzc2lvbi5wb2xpY3k7XG4gIHNlc3Npb24uc2lnbmF0dXJlID0gc2VjdXJpdHkgJiYgc2VjdXJpdHkuc2lnbmF0dXJlIHx8IHNlc3Npb24uc2lnbmF0dXJlO1xuXG4gIGNvbnN0IGZpbGVsaW5rID0gbmV3IEZpbGVsaW5rKHVybCwgc2Vzc2lvbi5hcGlrZXkpO1xuICBmaWxlbGluay5zdG9yZShzdG9yZVBhcmFtcyk7XG5cbiAgaWYgKHNlc3Npb24ucG9saWN5ICYmIHNlc3Npb24uc2lnbmF0dXJlKSB7XG4gICAgZmlsZWxpbmsuc2VjdXJpdHkoe1xuICAgICAgcG9saWN5OiBzZXNzaW9uLnBvbGljeSxcbiAgICAgIHNpZ25hdHVyZTogc2Vzc2lvbi5zaWduYXR1cmUsXG4gICAgfSk7XG4gIH1cblxuICBsZXQgb3B0aW9uczogYW55ID0ge307XG5cbiAgaWYgKHRva2VuKSB7XG4gICAgY29uc3QgY2FuY2VsVG9rZW4gPSBuZXcgRnNDYW5jZWxUb2tlbigpO1xuICAgIHRva2VuLmNhbmNlbCA9IGNhbmNlbFRva2VuLmNhbmNlbC5iaW5kKGNhbmNlbFRva2VuKTtcbiAgICBvcHRpb25zLmNhbmNlbFRva2VuID0gY2FuY2VsVG9rZW47XG4gIH1cblxuICBsZXQgc291cmNlczogYW55ID0gWyB1cmwgXTtcblxuICBpZiAoaGVhZGVycykge1xuICAgIHNvdXJjZXMgPSBbe1xuICAgICAgc291cmNlOiB1cmwsXG4gICAgICBoZWFkZXJzLFxuICAgIH1dO1xuICB9XG5cbiAgaWYgKHdvcmtmbG93SWRzICYmIHdvcmtmbG93SWRzLmxlbmd0aCA+IDApIHtcbiAgICBmaWxlbGluay5hZGRUYXNrKCdzdG9yZScsIHsgd29ya2Zsb3dzOiB3b3JrZmxvd0lkcyB9KTtcbiAgfVxuXG4gIHJldHVybiBGc1JlcXVlc3QucG9zdChgJHtzZXNzaW9uLnVybHMucHJvY2Vzc1VybH0vcHJvY2Vzc2AsIHtcbiAgICBhcGlrZXk6IHNlc3Npb24uYXBpa2V5LFxuICAgIHNvdXJjZXMsXG4gICAgdGFza3M6IGZpbGVsaW5rLmdldFRhc2tzKCksXG4gICAgdXBsb2FkX3RhZ3M6IHVwbG9hZFRhZ3MsXG4gIH0sIG9wdGlvbnMpLnRoZW4oKHJlcykgPT4ge1xuICAgIGlmIChyZXMuZGF0YSAmJiByZXMuZGF0YS5oYW5kbGUpIHtcbiAgICAgIGlmIChyZXMuZGF0YS51cGxvYWRfdGFncykge1xuICAgICAgICByZXMuZGF0YS51cGxvYWRUYWdzID0gcmVzLmRhdGEudXBsb2FkX3RhZ3M7XG4gICAgICAgIGRlbGV0ZSByZXMuZGF0YS51cGxvYWRfdGFncztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgLi4ucmVzLmRhdGEsIG1pbWV0eXBlOiByZXMuZGF0YS50eXBlIH07XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEZpbGVzdGFja0Vycm9yKGBJbnZhbGlkIHN0b3JlIHJlc3BvbnNlICR7SlNPTi5zdHJpbmdpZnkocmVzLmRhdGEpfWApO1xuICB9KTtcbn07XG4iXX0=
