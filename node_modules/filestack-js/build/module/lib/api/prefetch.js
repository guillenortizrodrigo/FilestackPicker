/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __assign, __awaiter, __generator } from "tslib";
// import Debug from 'debug';
import { FilestackError } from './../../filestack_error';
import { Client } from './../client';
import { FsRequest } from '../request';
import { cleanUpCallbacks } from './../utils';
import * as cloneDeep from 'lodash.clonedeep';
export var PrefetchEvents;
(function (PrefetchEvents) {
    PrefetchEvents["PICKER"] = "picker";
    PrefetchEvents["TRANSFORM_UI"] = "transform_ui";
})(PrefetchEvents || (PrefetchEvents = {}));
/**
 * @private
 */
var Prefetch = /** @class */ (function () {
    function Prefetch(param) {
        if (param instanceof Client) {
            this.session = param.session;
        }
        else {
            this.session = param;
        }
    }
    /**
     * Returns filestack options from backend according to input params
     *
     * @param param0
     */
    Prefetch.prototype.getConfig = function (_a) {
        var pickerOptions = _a.pickerOptions, settings = _a.settings, permissions = _a.permissions, events = _a.events;
        return __awaiter(this, void 0, void 0, function () {
            var paramsToSend, pickerOptionsToSend;
            var _this = this;
            return __generator(this, function (_b) {
                paramsToSend = {
                    apikey: this.session.apikey,
                };
                if (this.session.policy && this.session.signature) {
                    paramsToSend.security = { policy: this.session.policy, signature: this.session.signature };
                }
                // if (this.session.prefetch && events) {
                //   return FsRequest.post(`${this.session.urls.uploadApiUrl}/prefetch`, { ...paramsToSend, events }).then(() => this.session.prefetch);
                // }
                // we should always ask for this setting for picker
                if (!settings) {
                    settings = ['inapp_browser'];
                }
                else {
                    settings = settings.concat(['inapp_browser']);
                    // make arrray unique
                    settings = settings.filter(function (v, i) { return settings.indexOf(v) === i; });
                }
                if (pickerOptions && Object.keys(pickerOptions).length) {
                    pickerOptionsToSend = cleanUpCallbacks(cloneDeep(__assign({}, pickerOptions)));
                }
                paramsToSend = __assign(__assign({}, paramsToSend), { permissions: permissions,
                    settings: settings, picker_config: pickerOptionsToSend, events: events });
                this.session.prefetch = null;
                return [2 /*return*/, FsRequest.post(this.session.urls.uploadApiUrl + "/prefetch", paramsToSend).then(function (res) {
                        /* istanbul ignore if */
                        if (res.status !== 200) {
                            throw new FilestackError('There is a problem with prefetch request');
                        }
                        var data = res.data;
                        // if backend not returning updated_config cay we take old config and return
                        if (data.updated_config) {
                            // reassign callback from old config to new one returned from backend
                            data.pickerOptions = _this.reassignCallbacks(pickerOptions, data.updated_config || {});
                            delete data.updated_config;
                        }
                        else {
                            data.pickerOptions = pickerOptions;
                        }
                        _this.session.prefetch = data;
                        return data;
                    })];
            });
        });
    };
    /**
     * Reassign callbacks from old picker configuration
     *
     * @param objOld
     * @param objTarget
     */
    Prefetch.prototype.reassignCallbacks = function (objOld, objTarget) {
        if (!objOld || Object.keys(objOld).length === 0) {
            return objOld;
        }
        for (var k in objOld) {
            if (typeof objOld[k] === 'function') {
                objTarget[k] = objOld[k];
            }
            if (objOld[k] === Object(objOld[k])) {
                objTarget[k] = this.reassignCallbacks(objOld[k], objTarget[k]);
            }
        }
        return objTarget;
    };
    return Prefetch;
}());
export { Prefetch };

//# sourceMappingURL=data:application/json;charset=utf8;base64,
