/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { resolveCdnUrl, resolveHost, removeEmpty, uniqueTime, uniqueId, md5, extensionToMime, sanitizeName, filterObject, b64, getVersion, cleanUpCallbacks } from './index';
import { config } from '../../config';
var v = require('../../../../package.json').version;
describe('utils:index', function () {
    describe('resolveCdnUrl', function () {
        var session = {
            apikey: 'TEST_API_KEY',
            cname: 'example.com',
            urls: config.urls,
        };
        it('should properly resolve cdn url with hashed handle', function () {
            var handle = '5aYkEQJSQCmYShsoCnZN';
            var result = resolveCdnUrl(session, handle);
            expect(result).toEqual('https://cdn.filestackcontent.com');
        });
        it('should properly resolve cdn url with src handle', function () {
            var handle = 'src://test123/test.jpg';
            var result = resolveCdnUrl(session, handle);
            expect(result).toEqual('https://cdn.filestackcontent.com/TEST_API_KEY');
        });
        it('should properly resolve cdn url with hashed handle', function () {
            var handle = 'https://static1.squarespace.com/static/544eb3cce4b0ef091773611f/t/59ba7ce1bd10f00dcdc80a5f/1505394087367/DSC_0527.jpg';
            var result = resolveCdnUrl(session, handle);
            expect(result).toEqual('https://cdn.filestackcontent.com/TEST_API_KEY');
        });
        it('should throw an error when using src handle or url without apikey', function () {
            var handle = 'src://test123/test.jpg';
            session.apikey = '';
            expect(function () { resolveCdnUrl(session, handle); }).toThrow('Api key is required when storage alias is provided');
        });
    });
    describe('resolveHost', function () {
        var hosts = config.urls;
        var checkHosts = function (hosts, expected) {
            Object.keys(hosts).forEach(function (k) {
                expect(hosts[k].indexOf(expected) > -1).toBeTruthy();
            });
        };
        it('should return proper host', function () {
            var cname = 'example.com';
            var result = resolveHost(hosts, cname);
            checkHosts(result, cname);
        });
        it('should return hosts when cname is an empty string', function () {
            var cname = '';
            var result = resolveHost(hosts, cname);
            checkHosts(result, cname);
        });
    });
    describe('removeEmpty', function () {
        it('should remove empty options from an object', function () {
            var testOb = { test1: true, test2: undefined, test3: false };
            expect(removeEmpty(testOb)).toEqual({ test1: true, test3: false });
        });
    });
    describe('uniqueTime', function () {
        it('should return unique times', function () {
            expect(uniqueTime()).not.toEqual(uniqueTime());
        });
    });
    describe('uniqueId', function () {
        it('should get different ids each time', function () {
            expect(uniqueId()).not.toEqual(uniqueId());
        });
        it('should return id with given length', function () {
            expect(uniqueId(12).length).toEqual(12);
            expect(uniqueId(4).length).toEqual(4);
        });
    });
    describe('md5', function () {
        it('should return correct md5 value', function () {
            expect(md5(Buffer.from('test'))).toEqual('CY9rzUYh03PK3k6DJie09g==');
        });
    });
    describe('getVersion', function () {
        it('should return correct version from package json', function () {
            expect(getVersion()).toEqual("JS-" + v);
        });
    });
    describe('b64', function () {
        it('should return correct b65 value', function () {
            expect(b64('testtext')).toEqual('dGVzdHRleHQ=');
        });
        it('should escape chars to make b64 url safe string - char "/"', function () {
            expect(b64('*0eijATh#"I$PR)s<uTa}{t>E"LC:L', true)).toEqual('KjBlaWpBVGgjIkkkUFIpczx1VGF9e3Q-RSJMQzpM');
        });
        it('should escape chars to make b64 url safe string - char ""', function () {
            expect(b64('W{wpB@ckYD0O@&?!||9PS)7^+F*H8N', true)).toEqual('V3t3cEJAY2tZRDBPQCY_IXx8OVBTKTdeK0YqSDhO');
        });
    });
    describe('sanitizeName', function () {
        it('should sanitize file name with extension', function () {
            expect(sanitizeName('a\\{%`"~[]#|^<>1.jpg')).toEqual('a-------------1.jpg');
        });
        it('should sanitize file name without extension', function () {
            expect(sanitizeName('123qwe')).toEqual('123qwe');
        });
        it('should return undefined on empty string', function () {
            expect(sanitizeName('')).toEqual('undefined');
        });
        it('should respect sanitize options as boolean', function () {
            expect(sanitizeName('[]#|.jpg', false)).toEqual('[]#|.jpg');
        });
        it('should not change dots in filename', function () {
            expect(sanitizeName('[]#some.tar.gz', false)).toEqual('[]#some.tar.gz');
        });
        it('should respect sanitize options with provided options', function () {
            expect(sanitizeName('[]#|.jpg', {
                exclude: ['[', ']'],
                replacement: '_',
            })).toEqual('__#|.jpg');
        });
    });
    describe('filterObject', function () {
        it('should filter object', function () {
            expect(filterObject({
                test: 1,
                test2: 2,
                test3: 3,
            }, ['test', 'test2'])).toEqual({
                test: 1,
                test2: 2,
            });
        });
        it('should result the same object on empty requirements', function () {
            expect(filterObject({
                test: 1,
                test2: 2,
                test3: 3,
            }, [])).toEqual({
                test: 1,
                test2: 2,
                test3: 3,
            });
        });
        it('should not throw on empty filtered object', function () {
            expect(filterObject({}, ['test'])).toEqual({});
        });
    });
    describe('extensionToMime', function () {
        it('should return mimetype if mime is passed', function () {
            expect(extensionToMime('')).toEqual(undefined);
        });
        it('should return same mime is passed', function () {
            expect(extensionToMime('image/png')).toEqual('image/png');
            expect(extensionToMime('image/jpg')).toEqual('image/jpg');
            expect(extensionToMime('application/pdf')).toEqual('application/pdf');
        });
        it('it should return correct mimes for ext', function () {
            expect(extensionToMime('.png')).toEqual('image/png');
            expect(extensionToMime('.jpg')).toEqual('image/jpeg');
            expect(extensionToMime('.pdf')).toEqual('application/pdf');
            expect(extensionToMime('.key')).toEqual('application/vnd.apple.keynote');
            expect(extensionToMime('.zip')).toEqual('application/zip');
            expect(extensionToMime('.numbers')).toEqual('application/vnd.apple.numbers');
        });
        it('it should extract extensions form filename or ext with dot', function () {
            expect(extensionToMime('test.png')).toEqual('image/png');
            expect(extensionToMime('test.jpg')).toEqual('image/jpeg');
            expect(extensionToMime('test.pdf')).toEqual('application/pdf');
        });
    });
    describe('CleanupCallbacks', function () {
        it('should set callbacks as undefined and return untouched object', function () {
            var testObj = {
                fn: function () { return 1; },
                test: {
                    fn2: function () { return 2; },
                },
                testN: 123,
                tests: 'string',
                testObj: {
                    tst: 123,
                },
            };
            expect(cleanUpCallbacks(testObj)).toEqual({
                test: {},
                testN: 123,
                tests: 'string',
                testObj: {
                    tst: 123,
                },
            });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
