"use strict";
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var filestack_error_1 = require("./../../filestack_error");
var request_1 = require("../request");
var store_1 = require("./../utils/store");
/**
 * @private
 */
exports.PICKER_KEY = '__fs_picker_token';
/**
 * key for picker callback url (specifies which tab will be opened after opening picker)
 * @private
 */
exports.CALLBACK_URL_KEY = 'fs-tab';
/**
 * @private
 */
var CloudClient = /** @class */ (function () {
    function CloudClient(session, options) {
        /**
         * Returns flag if token should be cached in local storage
         *
         * @private
         * @type {boolean}
         * @memberof CloudClient
         */
        this.cache = false;
        this.session = session;
        this.storeAdapter = new store_1.Store();
        this.cloudApiUrl = session.urls.cloudApiUrl;
        if (options && options.sessionCache) {
            this.cache = options.sessionCache;
        }
    }
    Object.defineProperty(CloudClient.prototype, "token", {
        get: function () {
            if (this.cache) {
                var token = this.storeAdapter.getItem(exports.PICKER_KEY, store_1.STORE_TYPE.LOCAL);
                if (token)
                    return token;
            }
            if (this.isInAppBrowser) {
                return this.storeAdapter.getItem(exports.PICKER_KEY, store_1.STORE_TYPE.SESSION);
            }
            return this._token;
        },
        set: function (key) {
            if (this.cache) {
                this.storeAdapter.setItem(exports.PICKER_KEY, key, store_1.STORE_TYPE.LOCAL);
            }
            if (this.isInAppBrowser) {
                this.storeAdapter.setItem(exports.PICKER_KEY, key, store_1.STORE_TYPE.SESSION);
            }
            this._token = key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CloudClient.prototype, "isInAppBrowser", {
        /**
         * Return information is inappbrowser flag is set
         *
         * @readonly
         * @memberof CloudClient
         */
        get: function () {
            if (this.session
                && this.session.prefetch
                && this.session.prefetch.settings
                && this.session.prefetch.settings.inapp_browser) {
                return this.session.prefetch.settings.inapp_browser;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    CloudClient.prototype.list = function (clouds, cancelTokenInput, accept) {
        var _this = this;
        var payload = {
            apikey: this.session.apikey,
            clouds: clouds,
            flow: 'web',
            token: this.token,
        };
        if (accept) {
            if (!Array.isArray(accept)) {
                accept = [accept];
            }
            // filtering mimetypes in clouds
            payload.accept = accept;
        }
        if (this.isInAppBrowser) {
            payload.appurl = this.currentAppUrl();
        }
        if (this.session.policy && this.session.signature) {
            payload.policy = this.session.policy;
            payload.signature = this.session.signature;
        }
        var options = {};
        if (cancelTokenInput) {
            var cancelToken = new request_1.FsCancelToken();
            cancelTokenInput.cancel = cancelToken.cancel.bind(cancelToken);
            options.cancelToken = cancelToken;
        }
        return request_1.FsRequest.post(this.cloudApiUrl + "/folder/list", payload, options).then(function (res) {
            if (res.data && res.data.token) {
                _this.token = res.data.token;
            }
            return res.data;
        });
    };
    CloudClient.prototype.store = function (name, path, options, customSource, cancelTokenInput, uploadTags) {
        var _a;
        var _this = this;
        if (options === void 0) { options = {}; }
        if (customSource === void 0) { customSource = {}; }
        if (uploadTags === void 0) { uploadTags = null; }
        // Default to S3
        if (options.location === undefined) {
            options.location = 's3';
        }
        var payload = {
            apikey: this.session.apikey,
            token: this.token,
            flow: 'web',
            upload_tags: uploadTags ? uploadTags : undefined,
            clouds: (_a = {},
                _a[name] = {
                    path: path,
                    store: utils_1.removeEmpty(options),
                },
                _a),
        };
        if (name === 'customsource' && customSource.customSourcePath) {
            payload.clouds.customsource.customSourcePath = customSource.customSourcePath;
        }
        if (name === 'customsource' && customSource.customSourceContainer) {
            payload.clouds.customsource.customSourceContainer = customSource.customSourceContainer;
        }
        if (this.session.policy && this.session.signature) {
            payload.policy = this.session.policy;
            payload.signature = this.session.signature;
        }
        var requestOptions = {};
        if (cancelTokenInput) {
            var cancelToken = new request_1.FsCancelToken();
            cancelTokenInput.cancel = cancelToken.cancel.bind(cancelToken);
            requestOptions.cancelToken = cancelToken;
        }
        return request_1.FsRequest.post(this.cloudApiUrl + "/store/", payload, requestOptions).then(function (res) {
            if (res.data && res.data.token) {
                _this.token = res.data.token;
            }
            if (res.data && res.data[name]) {
                return res.data[name];
            }
            return res.data;
        });
    };
    CloudClient.prototype.logout = function (name) {
        var _a;
        var payload = {
            apikey: this.session.apikey,
            flow: 'web',
            token: this.token,
        };
        if (name) {
            payload.clouds = (_a = {}, _a[name] = {}, _a);
        }
        else {
            if (this.cache) {
                // No name means logout of ALL clouds. Clear local session.
                this.storeAdapter.removeItem(exports.PICKER_KEY, store_1.STORE_TYPE.LOCAL);
            }
            if (this.isInAppBrowser) {
                this.storeAdapter.removeItem(exports.PICKER_KEY, store_1.STORE_TYPE.SESSION);
            }
        }
        return request_1.FsRequest.post(this.cloudApiUrl + "/auth/logout", payload).then(function (res) {
            if (res.data && res.data[name]) {
                return res.data[name];
            }
            return res.data;
        });
    };
    CloudClient.prototype.metadata = function (url, headers) {
        var payload = {
            apikey: this.session.apikey,
            url: url,
            headers: headers,
        };
        if (this.session.policy && this.session.signature) {
            payload.policy = this.session.policy;
            payload.signature = this.session.signature;
        }
        return request_1.FsRequest.post(this.cloudApiUrl + "/metadata", payload).then(function (res) { return res.data; });
    };
    // OpenTok API Endpoints
    CloudClient.prototype.tokInit = function (type) {
        if (type !== 'video' && type !== 'audio') {
            throw new filestack_error_1.FilestackError('Type must be one of video or audio.');
        }
        return request_1.FsRequest.post(this.cloudApiUrl + "/recording/" + type + "/init").then(function (res) { return res.data; });
    };
    CloudClient.prototype.tokStart = function (type, key, sessionId) {
        if (type !== 'video' && type !== 'audio') {
            throw new filestack_error_1.FilestackError('Type must be one of video or audio.');
        }
        var payload = {
            apikey: key,
            session_id: sessionId,
        };
        return request_1.FsRequest.post(this.cloudApiUrl + "/recording/" + type + "/start", payload).then(function (res) { return res.data; });
    };
    CloudClient.prototype.tokStop = function (type, key, sessionId, archiveId) {
        if (type !== 'video' && type !== 'audio') {
            throw new filestack_error_1.FilestackError('Type must be one of video or audio.');
        }
        var payload = {
            apikey: key,
            session_id: sessionId,
            archive_id: archiveId,
        };
        return request_1.FsRequest.post(this.cloudApiUrl + "/recording/" + type + "/stop", payload).then(function (res) { return res.data; });
    };
    CloudClient.prototype.currentAppUrl = function () {
        if (!window.URLSearchParams) {
            return undefined;
        }
        // set init string for clouds backend,
        // After this cloud service can make redirect back to current page url with selected tab for given cloud
        // if param exists and its value is init, backend will fill it with cloud name
        var searchParams = new URLSearchParams(window.location.search);
        searchParams.set(exports.CALLBACK_URL_KEY, 'init');
        return window.location.protocol + "//" + window.location.host + window.location.pathname + "?" + searchParams.toString();
    };
    return CloudClient;
}());
exports.CloudClient = CloudClient;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
