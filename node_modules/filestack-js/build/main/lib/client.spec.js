"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var filestack_error_1 = require("./../filestack_error");
var config_1 = require("./../config");
var client_1 = require("./client");
var cloud_1 = require("./api/cloud");
var upload_1 = require("./api/upload/upload");
var picker_1 = require("./picker");
var preview_1 = require("./api/preview");
var file_1 = require("./api/file");
var store_1 = require("./api/store");
var transform_1 = require("./api/transform");
jest.mock('./api/upload/upload');
jest.mock('./api/cloud');
jest.mock('./api/file');
jest.mock('./api/store');
jest.mock('./picker');
jest.mock('./api/preview');
jest.mock('./api/transform');
describe('client', function () {
    var defaultApikey = 'EXAMPLE_API_KEY';
    var defaultHandle = 'EXAMPLE_HANDLE';
    var defaultSecurity = {
        policy: 'examplePolicy',
        signature: 'exampleSignature',
    };
    var sessionURls = config_1.config.urls;
    var defaultSession = {
        apikey: defaultApikey,
        urls: sessionURls,
    };
    it('should properly instantiate Client', function () {
        var client = new client_1.Client(defaultApikey);
        expect(client).toBeDefined();
        expect(client).toBeInstanceOf(client_1.Client);
    });
    it('should throw an error if api key not provided', function () {
        expect(function () {
            return new client_1.Client('');
        }).toThrow('An apikey is required to initialize the Filestack client');
    });
    it('should throw an error if provided security without signature', function () {
        var options = {
            security: {
                policy: 'examplePolicy',
                signature: '',
            },
        };
        expect(function () {
            return new client_1.Client(defaultApikey, options);
        }).toThrow('Both policy and signature are required for client security');
    });
    it('should pass policy & signature to the session', function () {
        var options = {
            security: defaultSecurity,
        };
        var client = new client_1.Client(defaultApikey, options);
        expect(client.session.policy).toBe(options.security.policy);
        expect(client.session.signature).toBe(options.security.signature);
    });
    it('should pass cname to the session', function () {
        var options = {
            cname: 'testCname.com',
        };
        var client = new client_1.Client(defaultApikey, options);
        expect(client.session.cname).toBe(options.cname);
    });
    it('should be able to logout for provied cloud', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var client, cloudName;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = new client_1.Client(defaultApikey);
                    cloudName = 'dropbox';
                    return [4 /*yield*/, client.logout(cloudName)];
                case 1:
                    _a.sent();
                    expect(cloud_1.CloudClient.prototype.logout).toHaveBeenCalledWith(cloudName);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should get metadata for a provided handle', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var client, options;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = new client_1.Client(defaultApikey);
                    options = {
                        sha224: true,
                    };
                    return [4 /*yield*/, client.metadata(defaultHandle, options, defaultSecurity)];
                case 1:
                    _a.sent();
                    expect(file_1.metadata).toHaveBeenCalledWith(defaultSession, defaultHandle, options, defaultSecurity);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should be able to open picker', function () {
        var client = new client_1.Client(defaultApikey);
        var pickerOptions = {
            lang: 'de',
        };
        client.picker(pickerOptions);
        expect(picker_1.picker).toHaveBeenCalledWith(client, pickerOptions);
    });
    it('should be able to open preview', function () {
        var client = new client_1.Client(defaultApikey);
        var previewOptions = {
            id: 'testElement',
        };
        client.preview(defaultHandle, previewOptions);
        expect(preview_1.preview).toHaveBeenCalledWith(defaultSession, defaultHandle, previewOptions);
    });
    it('should be able to remove handle', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var client;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = new client_1.Client(defaultApikey);
                    return [4 /*yield*/, client.remove(defaultHandle, defaultSecurity)];
                case 1:
                    _a.sent();
                    expect(file_1.remove).toHaveBeenCalledWith(defaultSession, defaultHandle, false, defaultSecurity);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should be able to remove metadata', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var client;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = new client_1.Client(defaultApikey);
                    return [4 /*yield*/, client.removeMetadata(defaultHandle, defaultSecurity)];
                case 1:
                    _a.sent();
                    expect(file_1.remove).toHaveBeenCalledWith(defaultSession, defaultHandle, true, defaultSecurity);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should be able to store url', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var client, url, options, token, uploadTags, headers, workflowIds;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = new client_1.Client(defaultApikey);
                    url = 'http://example.com/img3.jpg';
                    options = {};
                    token = {};
                    uploadTags = { test: '123' };
                    headers = { 'test': '123' };
                    workflowIds = ['123', '321'];
                    return [4 /*yield*/, client.storeURL(url, options, token, defaultSecurity, uploadTags, headers, workflowIds)];
                case 1:
                    _a.sent();
                    expect(store_1.storeURL).toHaveBeenCalledWith({
                        session: defaultSession,
                        url: url,
                        storeParams: options,
                        token: token,
                        security: defaultSecurity,
                        uploadTags: uploadTags,
                        headers: headers,
                        workflowIds: workflowIds,
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('should be able to retrieve handle', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var client, retrieveOptions;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = new client_1.Client(defaultApikey);
                    retrieveOptions = {};
                    return [4 /*yield*/, client.retrieve(defaultHandle, retrieveOptions, defaultSecurity)];
                case 1:
                    _a.sent();
                    expect(file_1.retrieve).toHaveBeenCalledWith(defaultSession, defaultHandle, retrieveOptions, defaultSecurity);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should be able to transform url with b64', function () {
        var client = new client_1.Client(defaultApikey);
        var transformOptions = {
            blur: {
                amount: 5,
            },
        };
        var b64 = true;
        client.transform(defaultHandle, transformOptions, b64);
        expect(transform_1.transform).toHaveBeenCalledWith(defaultSession, defaultHandle, transformOptions, b64);
    });
    it('should be able to transform url without b64', function () {
        var client = new client_1.Client(defaultApikey);
        var transformOptions = {
            blur: {
                amount: 5,
            },
        };
        client.transform(defaultHandle, transformOptions);
        expect(transform_1.transform).toHaveBeenCalledWith(defaultSession, defaultHandle, transformOptions, false);
    });
    it('should be able to upload file', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var client, file, uploadOptions, storeOptions, token;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = new client_1.Client(defaultApikey);
                    file = 'anyFile';
                    uploadOptions = {};
                    storeOptions = {};
                    token = {};
                    spyOn(upload_1.Upload.prototype, 'upload').and.returnValue(Promise.resolve());
                    return [4 /*yield*/, client.upload(file, uploadOptions, storeOptions, token, defaultSecurity)];
                case 1:
                    _a.sent();
                    expect(upload_1.Upload.prototype.setSession).toHaveBeenCalledWith({
                        apikey: defaultApikey,
                        urls: sessionURls,
                    });
                    expect(upload_1.Upload.prototype.setToken).toHaveBeenCalledWith(token);
                    expect(upload_1.Upload.prototype.setSecurity).toHaveBeenCalledWith(defaultSecurity);
                    expect(upload_1.Upload.prototype.upload).toHaveBeenCalledWith(file);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should be able to upload file without token and security', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var client, file, uploadOptions, storeOptions;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = new client_1.Client(defaultApikey);
                    file = 'anyFile';
                    uploadOptions = {};
                    storeOptions = {};
                    spyOn(upload_1.Upload.prototype, 'upload').and.returnValue(Promise.resolve());
                    return [4 /*yield*/, client.upload(file, uploadOptions, storeOptions)];
                case 1:
                    _a.sent();
                    expect(upload_1.Upload.prototype.setSession).toHaveBeenCalledWith({
                        apikey: defaultApikey,
                        urls: sessionURls,
                    });
                    expect(upload_1.Upload.prototype.upload).toHaveBeenCalledWith(file);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should emit error', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var client, file, uploadOptions, storeOptions, token, mockOnError, test;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = new client_1.Client(defaultApikey);
                    file = 'anyFile';
                    uploadOptions = {};
                    storeOptions = {};
                    token = {};
                    mockOnError = jest.fn().mockName('mockOnError');
                    test = new filestack_error_1.FilestackError('test');
                    client.on('upload.error', mockOnError);
                    jest.spyOn(upload_1.Upload.prototype, 'on').mockImplementation(function (name, cb, ctx) { return cb(test); });
                    return [4 /*yield*/, client.upload(file, uploadOptions, storeOptions, token, defaultSecurity)];
                case 1:
                    _a.sent();
                    expect(mockOnError).toHaveBeenCalledWith(test);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should be able to multiupload file', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var client, files, uploadOptions, storeOptions, token;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = new client_1.Client(defaultApikey);
                    files = ['anyFile'];
                    uploadOptions = {};
                    storeOptions = {};
                    token = {};
                    spyOn(upload_1.Upload.prototype, 'multiupload').and.returnValue(Promise.resolve());
                    return [4 /*yield*/, client.multiupload(files, uploadOptions, storeOptions, token, defaultSecurity)];
                case 1:
                    _a.sent();
                    expect(upload_1.Upload.prototype.setSession).toHaveBeenCalledWith({
                        apikey: defaultApikey,
                        urls: sessionURls,
                    });
                    expect(upload_1.Upload.prototype.setToken).toHaveBeenCalledWith(token);
                    expect(upload_1.Upload.prototype.setSecurity).toHaveBeenCalledWith(defaultSecurity);
                    expect(upload_1.Upload.prototype.multiupload).toHaveBeenCalledWith(files);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should call multiupload without security or token', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var client, files, uploadOptions, storeOptions;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = new client_1.Client(defaultApikey);
                    files = ['anyFile'];
                    uploadOptions = {};
                    storeOptions = {};
                    spyOn(upload_1.Upload.prototype, 'multiupload').and.returnValue(Promise.resolve());
                    return [4 /*yield*/, client.multiupload(files, uploadOptions, storeOptions)];
                case 1:
                    _a.sent();
                    expect(upload_1.Upload.prototype.setSession).toHaveBeenCalledWith({
                        apikey: defaultApikey,
                        urls: sessionURls,
                    });
                    expect(upload_1.Upload.prototype.multiupload).toHaveBeenCalledWith(files);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should emit error for multiupload', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var client, files, uploadOptions, storeOptions, token, mockOnError, test;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = new client_1.Client(defaultApikey);
                    files = ['anyFile'];
                    uploadOptions = {};
                    storeOptions = {};
                    token = {};
                    spyOn(upload_1.Upload.prototype, 'multiupload').and.returnValue(Promise.resolve());
                    mockOnError = jest.fn().mockName('mockOnError');
                    test = new filestack_error_1.FilestackError('test');
                    client.on('upload.error', mockOnError);
                    jest.spyOn(upload_1.Upload.prototype, 'on').mockImplementation(function (name, cb, ctx) { return cb(test); });
                    return [4 /*yield*/, client.multiupload(files, uploadOptions, storeOptions, token, defaultSecurity)];
                case 1:
                    _a.sent();
                    expect(mockOnError).toHaveBeenCalledWith(test);
                    return [2 /*return*/];
            }
        });
    }); });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
