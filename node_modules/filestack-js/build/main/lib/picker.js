"use strict";
/*
 * Copyright (c) 2018 by Filestack
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var loader_1 = require("@filestack/loader");
var filestack_error_1 = require("./../filestack_error");
var schema_1 = require("./../schema");
var RotateDirection;
(function (RotateDirection) {
    RotateDirection["cw"] = "CW";
    RotateDirection["ccw"] = "CCW";
})(RotateDirection = exports.RotateDirection || (exports.RotateDirection = {}));
var PickerDisplayMode;
(function (PickerDisplayMode) {
    PickerDisplayMode["inline"] = "inline";
    PickerDisplayMode["overlay"] = "overlay";
    PickerDisplayMode["dropPane"] = "dropPane";
})(PickerDisplayMode = exports.PickerDisplayMode || (exports.PickerDisplayMode = {}));
/**
 * @private
 * A synchronous-looking wrapper for loading the picker and calling its methods.
 * This is currently needed because the picker module is loaded asynchronously.
 * Eventually we should offer a bundle with the picker module included.
 */
var PickerLoader = /** @class */ (function () {
    function PickerLoader(client, options) {
        var validateRes = schema_1.getValidator(schema_1.PickerParamsSchema)(options);
        if (validateRes.errors.length) {
            throw new filestack_error_1.FilestackError("Invalid picker params", validateRes.errors, filestack_error_1.FilestackErrorType.VALIDATION);
        }
        this._initialized = this.loadModule(client, options);
    }
    PickerLoader.prototype.open = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var picker;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._initialized];
                    case 1:
                        picker = _a.sent();
                        return [4 /*yield*/, picker.open()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PickerLoader.prototype.crop = function (files) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var picker;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._initialized];
                    case 1:
                        picker = _a.sent();
                        return [4 /*yield*/, picker.crop(files)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PickerLoader.prototype.close = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var picker;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._initialized];
                    case 1:
                        picker = _a.sent();
                        return [4 /*yield*/, picker.close()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PickerLoader.prototype.cancel = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var picker;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._initialized];
                    case 1:
                        picker = _a.sent();
                        return [4 /*yield*/, picker.cancel()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PickerLoader.prototype.loadModule = function (client, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var url, Picker;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = client.session.urls.pickerUrl;
                        return [4 /*yield*/, loader_1.loadModule(loader_1.FILESTACK_MODULES.PICKER, url)];
                    case 1:
                        Picker = _a.sent();
                        return [2 /*return*/, new Picker(client, options)];
                }
            });
        });
    };
    return PickerLoader;
}());
/**
 * Loads and creates picker instance
 *
 * @private
 * @param client
 * @param options
 */
exports.picker = function (client, options) {
    return new PickerLoader(client, options);
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcGlja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7OztBQUVILDRDQUFrRTtBQUNsRSx3REFBMEU7QUFHMUUsc0NBQStEO0FBK0QvRCxJQUFZLGVBR1g7QUFIRCxXQUFZLGVBQWU7SUFDekIsNEJBQVMsQ0FBQTtJQUNULDhCQUFVLENBQUE7QUFDWixDQUFDLEVBSFcsZUFBZSxHQUFmLHVCQUFlLEtBQWYsdUJBQWUsUUFHMUI7QUErR0QsSUFBWSxpQkFJWDtBQUpELFdBQVksaUJBQWlCO0lBQzNCLHNDQUFpQixDQUFBO0lBQ2pCLHdDQUFtQixDQUFBO0lBQ25CLDBDQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUFKVyxpQkFBaUIsR0FBakIseUJBQWlCLEtBQWpCLHlCQUFpQixRQUk1QjtBQTZpQkQ7Ozs7O0dBS0c7QUFDSDtJQUdFLHNCQUFZLE1BQWMsRUFBRSxPQUF1QjtRQUNqRCxJQUFNLFdBQVcsR0FBRyxxQkFBWSxDQUFDLDJCQUFrQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFOUQsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUM3QixNQUFNLElBQUksZ0NBQWMsQ0FBQyx1QkFBdUIsRUFBRSxXQUFXLENBQUMsTUFBTSxFQUFFLG9DQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3RHO1FBRUQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUssMkJBQUksR0FBVjs7Ozs7NEJBQ2lCLHFCQUFNLElBQUksQ0FBQyxZQUFZLEVBQUE7O3dCQUFoQyxNQUFNLEdBQUcsU0FBdUI7d0JBQ3RDLHFCQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBQTs7d0JBQW5CLFNBQW1CLENBQUM7Ozs7O0tBQ3JCO0lBRUssMkJBQUksR0FBVixVQUFXLEtBQVk7Ozs7OzRCQUNOLHFCQUFNLElBQUksQ0FBQyxZQUFZLEVBQUE7O3dCQUFoQyxNQUFNLEdBQUcsU0FBdUI7d0JBQ3RDLHFCQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUE7O3dCQUF4QixTQUF3QixDQUFDOzs7OztLQUMxQjtJQUVLLDRCQUFLLEdBQVg7Ozs7OzRCQUNpQixxQkFBTSxJQUFJLENBQUMsWUFBWSxFQUFBOzt3QkFBaEMsTUFBTSxHQUFHLFNBQXVCO3dCQUN0QyxxQkFBTSxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUE7O3dCQUFwQixTQUFvQixDQUFDOzs7OztLQUN0QjtJQUVLLDZCQUFNLEdBQVo7Ozs7OzRCQUNpQixxQkFBTSxJQUFJLENBQUMsWUFBWSxFQUFBOzt3QkFBaEMsTUFBTSxHQUFHLFNBQXVCO3dCQUN0QyxxQkFBTSxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUE7O3dCQUFyQixTQUFxQixDQUFDOzs7OztLQUN2QjtJQUVhLGlDQUFVLEdBQXhCLFVBQXlCLE1BQWMsRUFBRSxPQUF1Qjs7Ozs7O3dCQUN4QixHQUFHLEdBQVMsTUFBTSx1QkFBZixDQUFnQjt3QkFDMUMscUJBQU0sbUJBQVUsQ0FBQywwQkFBaUIsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUE7O3dCQUF4RCxNQUFNLEdBQUcsU0FBK0M7d0JBQzlELHNCQUFPLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBQzs7OztLQUNwQztJQUNILG1CQUFDO0FBQUQsQ0F0Q0EsQUFzQ0MsSUFBQTtBQUVEOzs7Ozs7R0FNRztBQUNVLFFBQUEsTUFBTSxHQUFHLFVBQUMsTUFBYyxFQUFFLE9BQXVCO0lBQzVELE9BQU8sSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQyIsImZpbGUiOiJsaWIvcGlja2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOCBieSBGaWxlc3RhY2tcbiAqIFNvbWUgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBsb2FkTW9kdWxlLCBGSUxFU1RBQ0tfTU9EVUxFUyB9IGZyb20gJ0BmaWxlc3RhY2svbG9hZGVyJztcbmltcG9ydCB7IEZpbGVzdGFja0Vycm9yLCBGaWxlc3RhY2tFcnJvclR5cGUgfSBmcm9tICcuLy4uL2ZpbGVzdGFja19lcnJvcic7XG5pbXBvcnQgeyBDbGllbnQgfSBmcm9tICcuL2NsaWVudCc7XG5pbXBvcnQgeyBGU1Byb2dyZXNzRXZlbnQsIFVwbG9hZE9wdGlvbnMsIFdvcmtmbG93Q29uZmlnIH0gZnJvbSAnLi9hcGkvdXBsb2FkL3R5cGVzJztcbmltcG9ydCB7IGdldFZhbGlkYXRvciwgUGlja2VyUGFyYW1zU2NoZW1hIH0gZnJvbSAnLi8uLi9zY2hlbWEnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBpY2tlckluc3RhbmNlIHtcbiAgLyoqXG4gICAqIENsb3NlIHBpY2tlci4gVGhpcyBvcGVyYXRpb24gaXMgaWRlbXBvdGVudC5cbiAgICovXG4gIGNsb3NlOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBDYW5jZWwgcGlja2VyIHVwbG9hZHMuIFRoaXMgb3BlcmF0aW9uIGlzIGlkZW1wb3RlbnQuXG4gICAqL1xuICBjYW5jZWw6ICgpID0+IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIE9wZW4gcGlja2VyLiBUaGlzIG9wZXJhdGlvbiBpcyBpZGVtcG90ZW50LlxuICAgKi9cbiAgb3BlbjogKCkgPT4gUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogU3BlY2lmeSBhIGxpc3Qgb2YgZmlsZXMgdG8gb3BlbiBpbiB0aGUgcGlja2VyIGZvciBjcm9wcGluZ1xuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyA8aW5wdXQgaWQ9XCJmaWxlU2VsZWN0XCIgdHlwZT1cImZpbGVcIj5cbiAgICpcbiAgICogY29uc3QgaW5wdXRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWxlU2VsZWN0Jyk7XG4gICAqIGNvbnN0IHBpY2tlciA9IGNsaWVudC5waWNrZXIoe1xuICAgKiAgIG9uVXBsb2FkRG9uZTogcmVzID0+IGNvbnNvbGUubG9nKHJlcyksXG4gICAqIH0pO1xuICAgKlxuICAgKiBpbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XG4gICAqICAgcGlja2VyLmNyb3AoZS50YXJnZXQuZmlsZXMpO1xuICAgKiB9KTtcbiAgICpcbiAgICogLy8gT3IgcGFzcyBhbiBhcnJheSBvZiBVUkwgc3RyaW5nc1xuICAgKiBjb25zdCB1cmxzID0gW1xuICAgKiAgICdodHRwczovL2Qxd3RxYWZmYWFqNjN6LmNsb3VkZnJvbnQubmV0L2ltYWdlcy9mb3hfaW5fZm9yZXN0MS5qcGcnLFxuICAgKiAgICdodHRwczovL2Qxd3RxYWZmYWFqNjN6LmNsb3VkZnJvbnQubmV0L2ltYWdlcy9zYWlsLmpwZycsXG4gICAqIF07XG4gICAqIHBpY2tlci5jcm9wKHVybHMpO1xuICAgKiBgYGBcbiAgICovXG4gIGNyb3A6IChmaWxlczogYW55W10pID0+IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGlja2VyQ3JvcHBlZERhdGEge1xuICBjcm9wQXJlYToge1xuICAgIC8qKlxuICAgICAqIFt4LCB5XVxuICAgICAqL1xuICAgIHBvc2l0aW9uOiBbbnVtYmVyLCBudW1iZXJdO1xuICAgIC8qKlxuICAgICAqIFt3aWR0aCwgaGVpZ2h0XVxuICAgICAqL1xuICAgIHNpemU6IFtudW1iZXIsIG51bWJlcl07XG4gIH07XG4gICAgLyoqXG4gICAgICogW3dpZHRoLCBoZWlnaHRdXG4gICAgICovXG4gIG9yaWdpbmFsSW1hZ2VTaXplOiBbbnVtYmVyLCBudW1iZXJdO1xufVxuXG5leHBvcnQgZW51bSBSb3RhdGVEaXJlY3Rpb24ge1xuICBjdyA9ICdDVycsXG4gIGNjdz0gJ0NDVycsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGlja2VyUm90YXRlZERhdGEge1xuICAvKipcbiAgICogQW1vdW50IHJvdGF0ZWQgaW4gZGVncmVlcy5cbiAgICovXG4gIHZhbHVlOiBudW1iZXI7XG4gIC8qKlxuICAgKiBDYW4gYmUgQ1cgb3IgQ0NXIChjbG9ja3dpc2UgLyBjb3VudGVyLWNsb2Nrd2lzZSlcbiAgICovXG4gIGRpcmVjdGlvbjogUm90YXRlRGlyZWN0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBpY2tlckZpbGVNZXRhZGF0YSB7XG4gIC8qKlxuICAgKiBUaGUgY2xvdWQgY29udGFpbmVyIGZvciB0aGUgdXBsb2FkZWQgZmlsZS5cbiAgICovXG4gIGNvbnRhaW5lcj86IHN0cmluZztcbiAgLyoqXG4gICAqIFBvc2l0aW9uIGFuZCBzaXplIGluZm9ybWF0aW9uIGZvciBjcm9wcGVkIGltYWdlcy5cbiAgICovXG4gIGNyb3BwZWQ/OiBQaWNrZXJDcm9wcGVkRGF0YTtcbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGZpbGUuXG4gICAqL1xuICBmaWxlbmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogRmlsZXN0YWNrIGhhbmRsZSBmb3IgdGhlIHVwbG9hZGVkIGZpbGUuXG4gICAqL1xuICBoYW5kbGU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBoYXNoLXByZWZpeGVkIGNsb3VkIHN0b3JhZ2UgcGF0aC5cbiAgICovXG4gIGtleT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBNSU1FIHR5cGUgb2YgdGhlIGZpbGUuXG4gICAqL1xuICBtaW1ldHlwZTogc3RyaW5nO1xuICAvKipcbiAgICogUHJvcGVydGllcyBvZiB0aGUgbG9jYWwgYmluYXJ5IGZpbGUuIEFsc28gc2VlIHRoZSBwaWNrIG9wdGlvbiBgZXhwb3NlT3JpZ2luYWxGaWxlYCBpZiB5b3Ugd2FudCB0aGUgdW5kZXJseWluZyBgRmlsZWAgb2JqZWN0LlxuICAgKi9cbiAgb3JpZ2luYWxGaWxlPzogb2JqZWN0IHwgRmlsZTtcbiAgLyoqXG4gICAqIFRoZSBvcmlnaW4gb2YgdGhlIGZpbGUsIGUuZy4gL0ZvbGRlci9maWxlLmpwZy5cbiAgICovXG4gIG9yaWdpbmFsUGF0aDogc3RyaW5nO1xuICAvKipcbiAgICogRGlyZWN0aW9uIGFuZCB2YWx1ZSBpbmZvcm1hdGlvbiBmb3Igcm90YXRlZCBpbWFnZXMuXG4gICAqL1xuICByb3RhdGVkPzogUGlja2VyUm90YXRlZERhdGE7XG4gIC8qKlxuICAgKiBTaXplIGluIGJ5dGVzIG9mIHRoZSB1cGxvYWRlZCBmaWxlLlxuICAgKi9cbiAgc2l6ZTogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIHNvdXJjZSBmcm9tIHdoZXJlIHRoZSBmaWxlIHdhcyBwaWNrZWQuXG4gICAqL1xuICBzb3VyY2U6IHN0cmluZztcbiAgLyoqXG4gICAqIEluZGljYXRlcyBGaWxlc3RhY2sgdHJhbnNpdCBzdGF0dXMuXG4gICAqL1xuICBzdGF0dXM/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBIHV1aWQgZm9yIHRyYWNraW5nIHRoaXMgZmlsZSBpbiBjYWxsYmFja3MuXG4gICAqL1xuICB1cGxvYWRJZDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIEZpbGVzdGFjayBDRE4gVVJMIGZvciB0aGUgdXBsb2FkZWQgZmlsZS5cbiAgICovXG4gIHVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbUF1dGhUZXh0T3B0aW9ucyB7XG4gIFtrZXk6IHN0cmluZ106IHtcbiAgICB0b3A/OiBzdHJpbmdbXSxcbiAgICBib3R0b20/OiBzdHJpbmdbXVxuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBpY2tlclJlc3BvbnNlIHtcbiAgZmlsZXNVcGxvYWRlZDogUGlja2VyRmlsZU1ldGFkYXRhW107XG4gIGZpbGVzRmFpbGVkOiBQaWNrZXJGaWxlTWV0YWRhdGFbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQaWNrZXJGaWxlQ2FsbGJhY2sge1xuICAoZmlsZTogUGlja2VyRmlsZU1ldGFkYXRhKTogdm9pZCB8IFByb21pc2U8YW55Pjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUGlja2VyRmlsZVdpdGhUb2tlbkNhbGxiYWNrIHtcbiAgKGZpbGU6IFBpY2tlckZpbGVNZXRhZGF0YSwgdG9rZW4/OiB7cGF1c2U/OiAoKSA9PiB2b2lkLCByZXN1bWU/OiAoKSA9PiB2b2lkLCBjYW5jZWw/OiAoKSA9PiB2b2lkfSk6IHZvaWQgfCBQcm9taXNlPGFueT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGlja2VyRmlsZUNhbmNlbENhbGxiYWNrIHtcbiAgKGZpbGU6IFBpY2tlckZpbGVNZXRhZGF0YSk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGlja2VyRmlsZUVycm9yQ2FsbGJhY2sge1xuICAoZmlsZTogUGlja2VyRmlsZU1ldGFkYXRhLCBlcnJvcjogRXJyb3IpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBpY2tlckZpbGVQcm9ncmVzc0NhbGxiYWNrIHtcbiAgKGZpbGU6IFBpY2tlckZpbGVNZXRhZGF0YSwgZXZlbnQ6IEZTUHJvZ3Jlc3NFdmVudCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGlja2VyVXBsb2FkU3RhcnRlZENhbGxiYWNrIHtcbiAgKGZpbGVzOiBQaWNrZXJGaWxlTWV0YWRhdGFbXSk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGlja2VyVXBsb2FkRG9uZUNhbGxiYWNrIHtcbiAgKGZpbGVzOiBQaWNrZXJSZXNwb25zZSk6IHZvaWQ7XG59XG5cbmV4cG9ydCBlbnVtIFBpY2tlckRpc3BsYXlNb2RlIHtcbiAgaW5saW5lID0gJ2lubGluZScsXG4gIG92ZXJsYXkgPSAnb3ZlcmxheScsXG4gIGRyb3BQYW5lID0gJ2Ryb3BQYW5lJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQaWNrZXJEcm9wUGFuZU9wdGlvbnMge1xuICAvKipcbiAgICogVG9nZ2xlIHRoZSBjcm9wIFVJIGZvciBkcm9wcGVkIGZpbGVzLlxuICAgKi9cbiAgY3JvcEZpbGVzPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgdGV4dCBjb250ZW50IGluIHRoZSBkcm9wIHBhbmUuXG4gICAqL1xuICBjdXN0b21UZXh0Pzogc3RyaW5nO1xuICAvKipcbiAgICogRGlzYWJsZSB0aGUgZmlsZSBpbnB1dCBvbiBjbGljay4gVGhpcyBkb2VzIG5vdCBkaXNhYmxlIHRoZSBgb25DbGlja2AgY2FsbGJhY2suXG4gICAqL1xuICBkaXNhYmxlQ2xpY2s/OiBib29sZWFuO1xuICAvKipcbiAgICogVG9nZ2xlIHRoZSBmdWxsLXBhZ2UgZHJvcCB6b25lIG92ZXJsYXkuXG4gICAqL1xuICBvdmVybGF5PzogYm9vbGVhbjtcbiAgb25EcmFnRW50ZXI/OiAoZXZ0OiBEcmFnRXZlbnQpID0+IHZvaWQ7XG4gIG9uRHJhZ0xlYXZlPzogKCkgPT4gdm9pZDtcbiAgb25EcmFnT3Zlcj86IChldnQ6IERyYWdFdmVudCkgPT4gdm9pZDtcbiAgb25Ecm9wPzogKGV2dDogRHJhZ0V2ZW50KSA9PiB2b2lkO1xuICAvKipcbiAgICogYG9uU3VjY2Vzc2AgbXVzdCBiZSB1c2VkIGluc3RlYWQgb2YgYG9uVXBsb2FkRG9uZWAuIFRoZSBkcm9wIHBhbmUgdXNlcyBpdHMgb3duIGNhbGxiYWNrcyBmb3IgY29tcGF0aWJpbGl0eSBwdXJwb3Nlcy4gVGhpcyBtaWdodCBldmVudHVhbGx5IGNoYW5nZS5cbiAgICovXG4gIG9uU3VjY2Vzcz86IChmaWxlczogUGlja2VyRmlsZU1ldGFkYXRhW10pID0+IHZvaWQ7XG4gIG9uRXJyb3I/OiAoZmlsZXM6IFBpY2tlckZpbGVNZXRhZGF0YVtdKSA9PiB2b2lkO1xuICBvblByb2dyZXNzPzogKHBlcmNlbnQ6IG51bWJlcikgPT4gdm9pZDtcbiAgb25DbGljaz86IChldnQ6IGFueSkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIFRvZ2dsZSBpY29uIGVsZW1lbnQgaW4gZHJvcCBwYW5lLlxuICAgKi9cbiAgc2hvd0ljb24/OiBib29sZWFuO1xuICAvKipcbiAgICogVG9nZ2xlIHVwbG9hZCBwcm9ncmVzcyBkaXNwbGF5LlxuICAgKi9cbiAgc2hvd1Byb2dyZXNzPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQaWNrZXJTdG9yZU9wdGlvbnMge1xuICAvKipcbiAgICogTG9jYXRpb24gZm9yIHN0b3JlZCBmaWxlLiBPbmUgb2YgJ3MzJywgJ2djcycsICdhenVyZScsICdyYWNrc3BhY2UnLCBvciAnZHJvcGJveCcuXG4gICAqL1xuICBsb2NhdGlvbj86IHN0cmluZztcbiAgLyoqXG4gICAqIFNwZWNpZnkgc3RvcmFnZSBjb250YWluZXIuXG4gICAqL1xuICBjb250YWluZXI/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTZXQgY29udGFpbmVyIHBhdGguIEluZGljYXRlIGEgZm9sZGVyIGJ5IGFkZGluZyBhIHRyYWlsaW5nIHNsYXNoLiBXaXRob3V0IGEgdHJhaWxpbmcgc2xhc2ggYWxsIGZpbGVzIHdpbGwgYmUgc3RvcmVkIHRvIHRoZSBzYW1lIG9iamVjdC5cbiAgICovXG4gIHBhdGg/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTcGVjaWZ5IFMzIHJlZ2lvbi5cbiAgICovXG4gIHJlZ2lvbj86IHN0cmluZztcbiAgLyoqXG4gICAqIFMzIGNvbnRhaW5lciBhY2Nlc3MuICdwdWJsaWMnIG9yICdwcml2YXRlJy5cbiAgICovXG4gIGFjY2Vzcz86IHN0cmluZztcblxuICAvKipcbiAgICogV29ya2Zsb3dzIGlkcyB0byBydW4gYWZ0ZXIgdXBsb2FkXG4gICAqL1xuICB3b3JrZmxvd3M/OiBzdHJpbmdbXSB8IFdvcmtmbG93Q29uZmlnW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGlja2VyQ3VzdG9tVGV4dCB7XG4gIC8vIEFjdGlvbnNcbiAgVXBsb2FkPzogc3RyaW5nO1xuICAnVXBsb2FkIG1vcmUnPzogc3RyaW5nO1xuICAnRGVzZWxlY3QgQWxsJz86IHN0cmluZztcbiAgJ1ZpZXcvRWRpdCBTZWxlY3RlZCc/OiBzdHJpbmc7XG4gICdTaWduIE91dCc/OiBzdHJpbmc7XG5cbiAgLy8gU291cmNlIExhYmVsc1xuICAnTXkgRGV2aWNlJz86IHN0cmluZztcbiAgJ1dlYiBTZWFyY2gnPzogc3RyaW5nO1xuICAnVGFrZSBQaG90byc/OiBzdHJpbmc7XG4gICdMaW5rIChVUkwpJz86IHN0cmluZztcbiAgJ1JlY29yZCBWaWRlbyc/OiBzdHJpbmc7XG4gICdSZWNvcmQgQXVkaW8nPzogc3RyaW5nO1xuXG4gIC8vIEN1c3RvbSBTb3VyY2VcbiAgJ0N1c3RvbSBTb3VyY2UnPzogc3RyaW5nO1xuXG4gIC8vIEZvb3RlciBUZXh0XG4gIEFkZD86IHN0cmluZztcbiAgJ21vcmUgZmlsZSc/OiBzdHJpbmc7XG4gICdtb3JlIGZpbGVzJz86IHN0cmluZztcblxuICAvLyBDbG91ZFxuICAnQ29ubmVjdCB7cHJvdmlkZXJOYW1lfSc/OiBzdHJpbmc7XG4gICdTZWxlY3QgRmlsZXMgZnJvbSB7cHJvdmlkZXJOYW1lfSc/OiBzdHJpbmc7XG4gICdZb3UgbmVlZCB0byBhdXRoZW50aWNhdGUgd2l0aCB7cHJvdmlkZXJOYW1lfS4nPzogc3RyaW5nO1xuICAnQSBuZXcgcGFnZSB3aWxsIG9wZW4gdG8gY29ubmVjdCB5b3VyIGFjY291bnQuJz86IHN0cmluZztcbiAgJ1dlIG9ubHkgZXh0cmFjdCBpbWFnZXMgYW5kIG5ldmVyIG1vZGlmeSBvciBkZWxldGUgdGhlbS4nPzogc3RyaW5nO1xuICAnVG8gZGlzY29ubmVjdCBmcm9tIHtwcm92aWRlck5hbWV9IGNsaWNrIFwiU2lnbiBvdXRcIiBidXR0b24gaW4gdGhlIG1lbnUuJz86IHN0cmluZztcbiAgJ1NpZ24gaW4gd2l0aCBHb29nbGUnPzogc3RyaW5nO1xuICAnR28gYmFjayc/OiBzdHJpbmc7XG4gICdUaGlzIGZvbGRlciBpcyBlbXB0eS4nPzogc3RyaW5nO1xuXG4gIC8vIFN1bW1hcnlcbiAgRmlsZXM/OiBzdHJpbmc7XG4gIEltYWdlcz86IHN0cmluZztcbiAgVXBsb2FkZWQ/OiBzdHJpbmc7XG4gIFVwbG9hZGluZz86IHN0cmluZztcbiAgQ29tcGxldGVkPzogc3RyaW5nO1xuICBGaWx0ZXI/OiBzdHJpbmc7XG4gICdDcm9wcGVkIEltYWdlcyc/OiBzdHJpbmc7XG4gICdFZGl0ZWQgSW1hZ2VzJz86IHN0cmluZztcbiAgJ1NlbGVjdGVkIEZpbGVzJz86IHN0cmluZztcbiAgJ0Nyb3AgaXMgcmVxdWlyZWQgb24gaW1hZ2VzJz86IHN0cmluZztcblxuICAvLyBUcmFuc2Zvcm1cbiAgQ3JvcD86IHN0cmluZztcbiAgQ2lyY2xlPzogc3RyaW5nO1xuICBSb3RhdGU/OiBzdHJpbmc7XG4gIE1hc2s/OiBzdHJpbmc7XG4gIFJldmVydD86IHN0cmluZztcbiAgRWRpdD86IHN0cmluZztcbiAgUmVzZXQ/OiBzdHJpbmc7XG4gIERvbmU/OiBzdHJpbmc7XG4gIFNhdmU/OiBzdHJpbmc7XG4gIE5leHQ/OiBzdHJpbmc7XG4gICdFZGl0IEltYWdlJz86IHN0cmluZztcbiAgJ1RoaXMgaW1hZ2UgY2Fubm90IGJlIGVkaXRlZCc/OiBzdHJpbmc7XG5cbiAgLy8gUmV0cnkgbWVzc2FnaW5nXG4gICdDb25uZWN0aW9uIExvc3QnPzogc3RyaW5nO1xuICAnRmFpbGVkIFdoaWxlIFVwbG9hZGluZyc/OiBzdHJpbmc7XG4gICdSZXRyeWluZyBpbic/OiBzdHJpbmc7XG4gICdUcnkgYWdhaW4nPzogc3RyaW5nO1xuICAnVHJ5IG5vdyc/OiBzdHJpbmc7XG5cbiAgLy8gTG9jYWwgRmlsZSBTb3VyY2VcbiAgJ0RyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJz86IHN0cmluZztcbiAgJ29yIERyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJz86IHN0cmluZztcbiAgJ1NlbGVjdCBGaWxlcyB0byBVcGxvYWQnPzogc3RyaW5nO1xuICAnU2VsZWN0IEZyb20nPzogc3RyaW5nO1xuICAnRHJvcCB5b3VyIGZpbGVzIGFueXdoZXJlJz86IHN0cmluZztcblxuICAvLyBJbnB1dCBwbGFjZWhvbGRlcnNcbiAgJ0VudGVyIGEgVVJMJz86IHN0cmluZztcbiAgJ1NlYXJjaCBpbWFnZXMnPzogc3RyaW5nO1xuXG4gIC8vIFdlYmNhbSBTb3VyY2VcbiAgJ1dlYmNhbSBEaXNhYmxlZCc/OiBzdHJpbmc7XG4gICdXZWJjYW0gTm90IFN1cHBvcnRlZCc/OiBzdHJpbmc7XG4gICdQbGVhc2UgZW5hYmxlIHlvdXIgd2ViY2FtIHRvIHRha2UgYSBwaG90by4nPzogc3RyaW5nO1xuICAnWW91ciBjdXJyZW50IGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB3ZWJjYW0gZnVuY3Rpb25hbGl0eS4nPzogc3RyaW5nO1xuICAnV2Ugc3VnZ2VzdCB1c2luZyBDaHJvbWUgb3IgRmlyZWZveC4nPzogc3RyaW5nO1xuXG4gIC8vIEVycm9yIE5vdGlmaWNhdGlvbnNcbiAgJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyBub3QgYW4gYWNjZXB0ZWQgZmlsZSB0eXBlLiBUaGUgYWNjZXB0ZWQgZmlsZSB0eXBlcyBhcmUge3R5cGVzfSc/OiBzdHJpbmc7XG4gICdGaWxlIHtkaXNwbGF5TmFtZX0gaXMgdG9vIGJpZy4gVGhlIGFjY2VwdGVkIGZpbGUgc2l6ZSBpcyBsZXNzIHRoYW4ge3JvdW5kRmlsZVNpemV9Jz86IHN0cmluZztcbiAgJ091ciBmaWxlIHVwbG9hZCBsaW1pdCBpcyB7bWF4RmlsZXN9IHtmaWxlc1RleHR9Jz86IHN0cmluZztcbiAgJ05vIHNlYXJjaCByZXN1bHRzIGZvdW5kIGZvciBcIntzZWFyY2h9XCInPzogc3RyaW5nO1xuICAnQW4gZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJz86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQaWNrZXJPcHRpb25zIHtcbiAgLyoqXG4gICAqIFJlc3RyaWN0IGZpbGUgdHlwZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBiZSBwaWNrZWQuIEZvcm1hdHMgYWNjZXB0ZWQ6XG4gICAqICAtIC5wZGYgPC0gYW55IGZpbGUgZXh0ZW5zaW9uXG4gICAqICAtIGltYWdlL2pwZWcgPC0gYW55IG1pbWUgdHlwZSBjb21tb25seSBrbm93biBieSBicm93c2Vyc1xuICAgKiAgLSBpbWFnZS8qIDwtIGFjY2VwdCBhbGwgdHlwZXMgb2YgaW1hZ2VzXG4gICAqICAtIHZpZGVvLyogPC0gYWNjZXB0IGFsbCB0eXBlcyBvZiB2aWRlbyBmaWxlc1xuICAgKiAgLSBhdWRpby8qIDwtIGFjY2VwdCBhbGwgdHlwZXMgb2YgYXVkaW8gZmlsZXNcbiAgICogIC0gYXBwbGljYXRpb24vKiA8LSBhY2NlcHQgYWxsIHR5cGVzIG9mIGFwcGxpY2F0aW9uIGZpbGVzXG4gICAqICAtIHRleHQvKiA8LSBhY2NlcHQgYWxsIHR5cGVzIG9mIHRleHQgZmlsZXNcbiAgICovXG4gIGFjY2VwdD86IHN0cmluZyB8IHN0cmluZ1tdO1xuICAvKipcbiAgICogQ3VzdG9tIGFjY2VwdCBjaGVjayBmdW5jdGlvblxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGFjY2VwdEZuOiAoZmlsZSwgb3B0aW9ucykgPT4ge1xuICAgKiAgcmV0dXJuIG9wdGlvbnMubWltZUZyb21NYWdpY0J5dGVzKGZpbGUub3JpZ2luYWxGaWxlKS50aGVuKChyZXMpID0+IHsgLy8gd2UgY2FuIGNoZWNrIG1pbWV0eXBlIGZyb20gbWFnaWMgYnl0ZXNcbiAgICogICAgLy9jb25zb2xlLmxvZyhvcHRpb25zLm1pbWVGcm9tRXh0ZW5zaW9uKGZpbGUub3JpZ2luYWxGaWxlLm5hbWUpKTsgLy8gb3IgY2hlY2sgZXh0ZW5zaW9uIGZyb20gZmlsZXN0YWNrIGV4dGVuc2lvbnMgZGF0YWJhc2VcbiAgICogICAgLy8gdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYWNjZXB0IHRoYXQgZmlsZScpIC8vIHdlIGNhbiB0aHJvdyBleGNlcHRpb24gdG8gYmxvY2sgZmlsZSB1cGxvYWRcbiAgICogICAgLy8gcmV0dXJuIFByb21pc2UucmVqZWN0KCdDYW5ub3QgYWNjZXB0IHRoYXQgZmlsZScnKSAvLyBvciByZWplY3QgYSBwcm9taXNlXG4gICAqICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICogIH0pO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgYWNjZXB0Rm4/OiAoUGlja2VyRmlsZU1ldGFkYXRhLCBQaWNrZXJBY2NlcHRGbk9wdGlvbnMpID0+IFByb21pc2U8c3RyaW5nPjtcbiAgLyoqXG4gICAqIFByZXZlbnQgbW9kYWwgY2xvc2Ugb24gdXBsb2FkIGZhaWx1cmUgYW5kIGFsbG93IHVzZXJzIHRvIHJldHJ5LlxuICAgKi9cbiAgYWxsb3dNYW51YWxSZXRyeT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiAgVmFsaWQgc291cmNlcyBhcmU6XG4gICAqICAtIGxvY2FsX2ZpbGVfc3lzdGVtIC0gRGVmYXVsdFxuICAgKiAgLSB1cmwgLSBEZWZhdWx0XG4gICAqICAtIGltYWdlc2VhcmNoIC0gRGVmYXVsdFxuICAgKiAgLSBmYWNlYm9vayAtIERlZmF1bHRcbiAgICogIC0gaW5zdGFncmFtIC0gRGVmYXVsdFxuICAgKiAgLSBnb29nbGVkcml2ZSAtIERlZmF1bHRcbiAgICogIC0gZHJvcGJveCAtIERlZmF1bHRcbiAgICogIC0gd2ViY2FtIC0gVXNlcyBkZXZpY2UgbWVudSBvbiBtb2JpbGUuIE5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGluIFNhZmFyaSBhbmQgSUUuXG4gICAqICAtIHZpZGVvIC0gVXNlcyBkZXZpY2UgbWVudSBvbiBtb2JpbGUuIE5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGluIFNhZmFyaSBhbmQgSUUuXG4gICAqICAtIGF1ZGlvIC0gVXNlcyBkZXZpY2UgbWVudSBvbiBtb2JpbGUuIE5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGluIFNhZmFyaSBhbmQgSUUuXG4gICAqICAtIGJveFxuICAgKiAgLSBnaXRodWJcbiAgICogIC0gZ21haWxcbiAgICogIC0gZ29vZ2xlcGhvdG9zXG4gICAqICAtIG9uZWRyaXZlXG4gICAqICAtIG9uZWRyaXZlZm9yYnVzaW5lc3NcbiAgICogIC0gY3VzdG9tc291cmNlIC0gQ29uZmlndXJlIHRoaXMgaW4geW91ciBGaWxlc3RhY2sgRGV2IFBvcnRhbC5cbiAgICogIC0gdW5zcGxhc2hcbiAgICovXG4gIGZyb21Tb3VyY2VzPzogc3RyaW5nW107XG4gIC8qKlxuICAgKiBDb250YWluZXIgd2hlcmUgcGlja2VyIHNob3VsZCBiZSBhcHBlbmRlZC4gT25seSByZWxldmFudCBmb3IgYGlubGluZWAgYW5kIGBkcm9wUGFuZWAgZGlzcGxheSBtb2Rlcy5cbiAgICovXG4gIGNvbnRhaW5lcj86IHN0cmluZyB8IE5vZGU7XG5cbiAgLyoqXG4gICAqIFR1cm4gb24gY2xlYW5pbmcgSlBFRyBpbWFnZSBleGlmLiBNZXRob2QgY2FuIGtlZXAgaW1hZ2Ugb3JpZW50YXRpb24gb3IgY29sb3IgcHJvZmlsZXNcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjbGVhbnVwSW1hZ2VFeGlmOiB7XG4gICAqICAga2VlcE9yaWVudGF0aW9uOiB0cnVlXG4gICAqICAga2VlcElDQ2FuZEFQUDogdHJ1ZVxuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgY2xlYW51cEltYWdlRXhpZj86IGJvb2xlYW4gfCB7XG4gICAga2VlcE9yaWVudGF0aW9uPzogYm9vbGVhbixcbiAgICBrZWVwSUNDYW5kQVBQPzogYm9vbGVhblxuICB9O1xuICAvKipcbiAgICogQ3VzdG9taXplIHRoZSB0ZXh0IG9uIHRoZSBjbG91ZCBhdXRoZW50aWNhdGlvbiBzY3JlZW4gaW4gUGlja2VyLlxuICAgKiBVc2UgYSBjbG91ZCBzb3VyY2UgbmFtZSAoc2VlIFtbUGlja2VyT3B0aW9ucy5mcm9tU291cmNlc11dKVxuICAgKiBvciBhICdkZWZhdWx0JyBhcyBhIGtleSwgdGhlbiBwdXQgeW91ciBjdXN0b20gbm90aWNlIG9yIGNvbnNlbnRcbiAgICogdG8gdGhlICd0b3AnIG9yIHRoZSAnYm90dG9tJyBrZXkgdG8gc2hvdyBpdCByZXNwZWN0aXZseSBhYm92ZSBvciB1bmRlciAnQ29ubmVjdCBidXR0b24nLlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGN1c3RvbUF1dGhUZXh0OiB7XG4gICAqICAgLy8gdXNlIGl0IGZvciBldmVyeSBjbG91ZCBhdXRoZW50aWNhdGlvbiBzY3JlZW5cbiAgICogICBkZWZhdWx0OiB7XG4gICAqICAgICB0b3A6IFtcbiAgICogICAgICAgJ2RlZmF1bHQgdG9wIGZpcnN0IGxpbmUnLFxuICAgKiAgICAgICAnZGVmYXVsdCB0b3Agc2Vjb25kIGxpbmUnXG4gICAqICAgICBdLFxuICAgKiAgICAgYm90dG9tOiBbXG4gICAqICAgICAgICdkZWZhdWx0IGJvdHRvbSBmaXJzdCBsaW5lJyxcbiAgICogICAgICAgJ2RlZmF1bHQgYm90dG9tIHNlY29uZCBsaW5lJ1xuICAgKiAgICAgXVxuICAgKiAgIH0sXG4gICAqICAgLy8gb3ZlcnJpZGUgYSBkZWZhdWx0IGJvdHRvbSB0ZXh0IGZvciBvbmx5IGdtYWlsXG4gICAqICAgZ21haWw6IHtcbiAgICogICAgIGJvdHRvbTogW1xuICAgKiAgICAgICAnV2UgbmVlZCB5b3VyIHBlcm1pc3Npb24gdG8gYWNjZXNzIHlvdXIgZGF0YSBhbmQnLFxuICAgKiAgICAgICAncHJvY2VzcyBpdCB3aXRoIG91ciBtYWNoaW5lIGxlYXJuaW5nIHN5c3RlbS4nXG4gICAqICAgICBdXG4gICAqICAgfVxuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgY3VzdG9tQXV0aFRleHQ/OiBDdXN0b21BdXRoVGV4dE9wdGlvbnM7XG4gIC8qKlxuICAgKiBQaWNrZXIgZGlzcGxheSBtb2RlLCBvbmUgb2YgYCdpbmxpbmUnYCwgYCdvdmVybGF5J2AsIGAnZHJvcFBhbmUnYCAtIGRlZmF1bHQgaXMgYCdvdmVybGF5J2AuXG4gICAqL1xuICBkaXNwbGF5TW9kZT86IFBpY2tlckRpc3BsYXlNb2RlO1xuICAvKipcbiAgICogTWF4IG51bWJlciBvZiBmaWxlcyB0byB1cGxvYWQgY29uY3VycmVudGx5LiBEZWZhdWx0IGlzIDQuXG4gICAqL1xuICBjb25jdXJyZW5jeT86IG51bWJlcjtcbiAgLyoqXG4gICAqIFNldCB0aGUgZGVmYXVsdCBjb250YWluZXIgZm9yIHlvdXIgY3VzdG9tIHNvdXJjZS5cbiAgICovXG4gIGN1c3RvbVNvdXJjZUNvbnRhaW5lcj86IHN0cmluZztcbiAgLyoqXG4gICAqIFNldCB0aGUgZGVmYXVsdCBwYXRoIGZvciB5b3VyIGN1c3RvbSBzb3VyY2UgY29udGFpbmVyLlxuICAgKi9cbiAgY3VzdG9tU291cmNlUGF0aD86IHN0cmluZztcbiAgLyoqXG4gICAqIFNldCB0aGUgZGlzcGxheSBuYW1lIGZvciB0aGUgY3VzdG9tIHNvdXJjZS5cbiAgICovXG4gIGN1c3RvbVNvdXJjZU5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBQcm92aWRlIGFuIG9iamVjdCBmb3IgbWFwcGluZyBwaWNrZXIgc3RyaW5ncyB0byB5b3VyIG93biBzdHJpbmdzLlxuICAgKiBTdHJpbmdzIHN1cnJvdW5kZWQgYnkgYnJhY2tldHMsIGB7IGZvb2JhciB9YCwgYXJlIGludGVycG9sYXRlZCB3aXRoIHJ1bnRpbWUgdmFsdWVzLlxuICAgKiBTb3VyY2UgbGFiZWxzIGFyZSBhbHNvIGF2YWlsYWJsZSB0byBvdmVycmlkZSwgZS5nLiBGYWNlYm9vaywgSW5zdGFncmFtLCBEcm9wYm94LCBldGMuXG4gICAqL1xuICBjdXN0b21UZXh0PzogUGlja2VyQ3VzdG9tVGV4dDtcbiAgLyoqXG4gICAqIHNldCBzdXBwb3J0IGVtYWlsIHRvIGRpc3BsYXkgaW4gY2FzZSBvZiBlcnJvclxuICAgKi9cbiAgc3VwcG9ydEVtYWlsPzogc3RyaW5nO1xuICAvKipcbiAgICogV2hlbiB0cnVlIHJlbW92ZXMgdGhlIGhhc2ggcHJlZml4IG9uIHN0b3JlZCBmaWxlcy5cbiAgICovXG4gIGRpc2FibGVTdG9yYWdlS2V5PzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSByZW1vdmVzIGFiaWxpdHkgdG8gZWRpdCBpbWFnZXMuXG4gICAqL1xuICBkaXNhYmxlVHJhbnNmb3JtZXI/OiBib29sZWFuO1xuICAvKipcbiAgICogRGlzYWJsZXMgbG9jYWwgaW1hZ2UgdGh1bWJuYWlsIHByZXZpZXdzIGluIHRoZSBzdW1tYXJ5IHNjcmVlbi5cbiAgICovXG4gIGRpc2FibGVUaHVtYm5haWxzPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIENvbmZpZ3VyZSB0aGUgZHJvcCBwYW5lIGJlaGF2aW9yLCBpLmUuIHdoZW4gYGRpc3BsYXlNb2RlYCBpcyBgZHJvcFBhbmVgLlxuICAgKi9cbiAgZHJvcFBhbmU/OiBQaWNrZXJEcm9wUGFuZU9wdGlvbnM7XG4gIC8qKlxuICAgKiBXaGVuIHRydWUgdGhlIGBvcmlnaW5hbEZpbGVgIG1ldGFkYXRhIHdpbGwgYmUgdGhlIGFjdHVhbCBgRmlsZWAgb2JqZWN0IGluc3RlYWQgb2YgYSBQT0pPXG4gICAqL1xuICBleHBvc2VPcmlnaW5hbEZpbGU/OiBib29sZWFuO1xuICAvKipcbiAgICogVG9nZ2xlIHRoZSBkcm9wIHpvbmUgdG8gYmUgYWN0aXZlIG9uIGFsbCB2aWV3cy4gRGVmYXVsdCBpcyBhY3RpdmUgb25seSBvbiBsb2NhbCBmaWxlIHNvdXJjZS5cbiAgICovXG4gIGdsb2JhbERyb3Bab25lPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEhpZGUgdGhlIHBpY2tlciBtb2RhbCBVSSBvbmNlIHVwbG9hZGluZyBiZWdpbnMuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAqL1xuICBoaWRlTW9kYWxXaGVuVXBsb2FkaW5nPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3BlY2lmeSBpbWFnZSBkaW1lbnNpb25zLiBlLmcuIFs4MDAsIDYwMF0uIE9ubHkgZm9yIEpQRUcsIFBORywgYW5kIEJNUCBmaWxlcy5cbiAgICogTG9jYWwgYW5kIGNyb3BwZWQgaW1hZ2VzIHdpbGwgYmUgcmVzaXplZCAodXBzY2FsZWQgb3IgZG93bnNjYWxlZCkgdG8gdGhlIHNwZWNpZmllZCBkaW1lbnNpb25zIGJlZm9yZSB1cGxvYWRpbmcuXG4gICAqIFRoZSBvcmlnaW5hbCBoZWlnaHQgdG8gd2lkdGggcmF0aW8gaXMgbWFpbnRhaW5lZC4gVG8gcmVzaXplIGFsbCBpbWFnZXMgYmFzZWQgb24gdGhlIHdpZHRoLCBzZXQgW3dpZHRoLCBudWxsXSwgZS5nLiBbODAwLCBudWxsXS5cbiAgICogRm9yIHRoZSBoZWlnaHQgc2V0IFtudWxsLCBoZWlnaHRdLCBlLmcuIFtudWxsLCA2MDBdLlxuICAgKi9cbiAgaW1hZ2VEaW0/OiBbbnVtYmVyLCBudW1iZXJdO1xuICAvKipcbiAgICogU3BlY2lmeSBtYXhpbXVtIGltYWdlIGRpbWVuc2lvbnMuIGUuZy4gWzgwMCwgNjAwXS4gT25seSBmb3IgSlBFRywgUE5HLCBhbmQgQk1QIGZpbGVzLlxuICAgKiBJbWFnZXMgYmlnZ2VyIHRoYW4gdGhlIHNwZWNpZmllZCBkaW1lbnNpb25zIHdpbGwgYmUgcmVzaXplZCB0byB0aGUgbWF4aW11bSBzaXplIHdoaWxlIG1haW50YWluaW5nIHRoZSBvcmlnaW5hbCBhc3BlY3QgcmF0aW8uXG4gICAqIFRoZSBvdXRwdXQgd2lsbCBub3QgYmUgZXhhY3RseSA4MDB4NjAwIHVubGVzcyB0aGUgaW1hZ2VNYXggbWF0Y2hlcyB0aGUgYXNwZWN0IHJhdGlvIG9mIHRoZSBvcmlnaW5hbCBpbWFnZS5cbiAgICovXG4gIGltYWdlTWF4PzogW251bWJlciwgbnVtYmVyXTtcbiAgLyoqXG4gICAqIFNwZWNpZnkgbWluaW11bSBpbWFnZSBkaW1lbnNpb25zLiBlLmcuIFs4MDAsIDYwMF0uIE9ubHkgZm9yIEpQRUcsIFBORywgYW5kIEJNUCBmaWxlcy5cbiAgICogSW1hZ2VzIHNtYWxsZXIgdGhhbiB0aGUgc3BlY2lmaWVkIGRpbWVuc2lvbnMgd2lsbCBiZSB1cHNjYWxlZCB0byB0aGUgbWluaW11bSBzaXplIHdoaWxlIG1haW50YWluaW5nIHRoZSBvcmlnaW5hbCBhc3BlY3QgcmF0aW8uXG4gICAqIFRoZSBvdXRwdXQgd2lsbCBub3QgYmUgZXhhY3RseSA4MDB4NjAwIHVubGVzcyB0aGUgaW1hZ2VNaW4gbWF0Y2hlcyB0aGUgYXNwZWN0IHJhdGlvIG9mIHRoZSBvcmlnaW5hbCBpbWFnZS5cbiAgICovXG4gIGltYWdlTWluPzogW251bWJlciwgbnVtYmVyXTtcbiAgLyoqXG4gICAqIFNldHMgbG9jYWxlLiBBY2NlcHRzOiBjYSwgZGEsIGRlLCBlbiwgZXMsIGZyLCBoZSwgaXQsIGphLCBrbywgbmwsIG5vLCBwbCwgcHQsIHN2LCBydSwgdmksIHpoLCB0clxuICAgKi9cbiAgbGFuZz86IHN0cmluZztcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIGZpbGVzIHJlcXVpcmVkIHRvIHN0YXJ0IHVwbG9hZGluZy4gRGVmYXVsdHMgdG8gMS5cbiAgICovXG4gIG1pbkZpbGVzPzogbnVtYmVyO1xuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2YgZmlsZXMgYWxsb3dlZCB0byB1cGxvYWQuIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBtYXhGaWxlcz86IG51bWJlcjtcbiAgLyoqXG4gICAqIFJlc3RyaWN0IHNlbGVjdGVkIGZpbGVzIHRvIGEgbWF4aW11bSBudW1iZXIgb2YgYnl0ZXMuIChlLmcuIDEwIFxcKiAxMDI0IFxcKiAxMDI0IGZvciAxME1CIGxpbWl0KS5cbiAgICovXG4gIG1heFNpemU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgdmlldyB0eXBlIG9wdGlvbiBmb3IgZmlsZSBicm93c2VyXG4gICAqL1xuICB2aWV3VHlwZT86ICdncmlkJyB8ICdsaXN0JztcblxuICAvKipcbiAgICogVGltZW91dCBmb3IgZXJyb3IgbWVzc2FnZXNcbiAgICovXG4gIGVycm9yc1RpbWVvdXQ/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBTcGVjaWZ5IFt3aWR0aCwgaGVpZ2h0XSBpbiBwaXhlbHMgb2YgdGhlIGRlc2t0b3AgbW9kYWwuXG4gICAqL1xuICBtb2RhbFNpemU/OiBbbnVtYmVyLCBudW1iZXJdO1xuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYWxsIHVwbG9hZHMgaW4gYSBwaWNrIGFyZSBjYW5jZWxsZWQuXG4gICAqL1xuICBvbkNhbmNlbD86IFBpY2tlclVwbG9hZERvbmVDYWxsYmFjaztcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBVSSBpcyBleGl0ZWQuXG4gICAqL1xuICBvbkNsb3NlPzogKCkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBVSSBpcyBtb3VudGVkLlxuICAgKiBAcGFyYW0gUGlja2VySW5zdGFuY2UgYXBwbGljYXRpb24gaGFuZGxlXG4gICAqL1xuICBvbk9wZW4/OiAoaGFuZGxlOiBQaWNrZXJJbnN0YW5jZSkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuZXZlciB1c2VyIHNlbGVjdHMgYSBmaWxlLlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBVc2luZyB0byB2ZXRvIGZpbGUgc2VsZWN0aW9uXG4gICAqIC8vIElmIHlvdSB0aHJvdyBhbnkgZXJyb3IgaW4gdGhpcyBmdW5jdGlvbiBpdCB3aWxsIHJlamVjdCB0aGUgZmlsZSBzZWxlY3Rpb24uXG4gICAqIC8vIFRoZSBlcnJvciBtZXNzYWdlIHdpbGwgYmUgZGlzcGxheWVkIHRvIHRoZSB1c2VyIGFzIGFuIGFsZXJ0LlxuICAgKiBvbkZpbGVTZWxlY3RlZChmaWxlKSB7XG4gICAqICAgaWYgKGZpbGUuc2l6ZSA+IDEwMDAgKiAxMDAwKSB7XG4gICAqICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpbGUgdG9vIGJpZywgc2VsZWN0IHNvbWV0aGluZyBzbWFsbGVyIHRoYW4gMU1CJyk7XG4gICAqICAgfVxuICAgKiB9XG4gICAqXG4gICAqIC8vIFVzaW5nIHRvIGNoYW5nZSBzZWxlY3RlZCBmaWxlIG5hbWVcbiAgICogLy8gTk9URTogVGhpcyBjdXJyZW50bHkgb25seSB3b3JrcyBmb3IgbG9jYWwgdXBsb2Fkc1xuICAgKiBvbkZpbGVTZWxlY3RlZChmaWxlKSB7XG4gICAqICAgLy8gSXQncyBpbXBvcnRhbnQgdG8gcmV0dXJuIGEgbmV3IGZpbGUgYnkgdGhlIGVuZCBvZiB0aGlzIGZ1bmN0aW9uLlxuICAgKiAgIHJldHVybiB7IC4uLmZpbGUsIG5hbWU6ICdmb28nIH07XG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIFRoZSBjYWxsYmFjayBmdW5jdGlvbiBjYW4gYWxzbyByZXR1cm4gYSBQcm9taXNlIHRvIGFsbG93IGFzeW5jaHJvbm91cyB2YWxpZGF0aW9uIGxvZ2ljLlxuICAgKiBZb3UgY2FuIHBhc3MgYSBmaWxlIG9iamVjdCB0byBgcmVzb2x2ZWAgZm9yIGNoYW5naW5nIHRoZSBmaWxlIG5hbWUsIGl0IHdpbGwgYmVoYXZlIHRoZSBzYW1lIGFzIHdoZW5cbiAgICogdGhlIGZpbGUgaXMgcmV0dXJuZWQgZnJvbSB0aGUgbm9uLWFzeW5jIGNhbGxiYWNrLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBvbkZpbGVTZWxlY3RlZChmaWxlKSB7XG4gICAqICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICogICAgIC8vIERvIHNvbWV0aGluZyBhc3luY1xuICAgKiAgICAgcmVzb2x2ZSgpO1xuICAgKiAgICAgLy8gT3IgcmVqZWN0IHRoZSBzZWxlY3Rpb24gd2l0aCByZWplY3QoKVxuICAgKiAgIH0pO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgb25GaWxlU2VsZWN0ZWQ/OiBQaWNrZXJGaWxlQ2FsbGJhY2s7XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIGZpbGUgdXBsb2FkIGhhcyBiZWVuIGNhbmNlbGVkLlxuICAgKi9cbiAgb25GaWxlVXBsb2FkQ2FuY2VsPzogUGlja2VyRmlsZUNhbmNlbENhbGxiYWNrO1xuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBmaWxlIGJlZ2lucyB1cGxvYWRpbmcuXG4gICAqL1xuICBvbkZpbGVVcGxvYWRTdGFydGVkPzogUGlja2VyRmlsZVdpdGhUb2tlbkNhbGxiYWNrO1xuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBmaWxlIGlzIGRvbmUgdXBsb2FkaW5nLlxuICAgKi9cbiAgb25GaWxlVXBsb2FkRmluaXNoZWQ/OiBQaWNrZXJGaWxlQ2FsbGJhY2s7XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB1cGxvYWRpbmcgYSBmaWxlIGZhaWxzLlxuICAgKi9cbiAgb25GaWxlVXBsb2FkRmFpbGVkPzogUGlja2VyRmlsZUVycm9yQ2FsbGJhY2s7XG4gIC8qKlxuICAgKiBDYWxsZWQgZHVyaW5nIG11bHRpLXBhcnQgdXBsb2FkIHByb2dyZXNzIGV2ZW50cy4gTG9jYWwgZmlsZXMgb25seS5cbiAgICovXG4gIG9uRmlsZVVwbG9hZFByb2dyZXNzPzogUGlja2VyRmlsZVByb2dyZXNzQ2FsbGJhY2s7XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBmaWxlIGlzIGNyb3BwZWQgaW4gcGlja2VyXG4gICAqL1xuICBvbkZpbGVDcm9wcGVkPzogUGlja2VyRmlsZUNhbGxiYWNrO1xuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdXBsb2FkaW5nIHN0YXJ0cyAodXNlciBpbml0aWF0ZXMgdXBsb2FkaW5nKS5cbiAgICovXG4gIG9uVXBsb2FkU3RhcnRlZD86IFBpY2tlclVwbG9hZFN0YXJ0ZWRDYWxsYmFjaztcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGFsbCBmaWxlcyBoYXZlIGJlZW4gdXBsb2FkZWQuXG4gICAqL1xuICBvblVwbG9hZERvbmU/OiBQaWNrZXJVcGxvYWREb25lQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIERlZmluZSBhIHVuaXF1ZSBpZCBmb3IgdGhlIGFwcGxpY2F0aW9uIG1vdW50IHBvaW50LlxuICAgKiBNYXkgYmUgdXNlZnVsIGZvciBtb3JlIGFkdmFuY2VkIHVzZSBjYXNlcy5cbiAgICogRm9yIGV4YW1wbGUsIGlmIHlvdSB3aXNoIHRvIGhhdmUgbW9yZSB0aGFuIG9uZSBwaWNrZXIgaW5zdGFuY2Ugb3BlbiBhdCBvbmNlLFxuICAgKiB0aGVuIGVhY2ggd2lsbCBuZWVkIHRoZWlyIG93biB1bmlxdWUgcm9vdElkLlxuICAgKlxuICAgKiAqKk5vdGU6KiogVGhpcyBvcHRpb24gaXMgaWdub3JlZCB3aGVuIGBkaXNwbGF5TW9kZWAgaXMgYGRyb3BQYW5lYC5cbiAgICovXG4gIHJvb3RJZD86IHN0cmluZztcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3RhcnQgdXBsb2FkaW5nIGF1dG9tYXRpY2FsbHkgd2hlbiBtYXhGaWxlcyBpcyBoaXQuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAqL1xuICBzdGFydFVwbG9hZGluZ1doZW5NYXhGaWxlc1JlYWNoZWQ/OiBib29sZWFuO1xuICAvKipcbiAgICogT3B0aW9ucyBmb3IgZmlsZSBzdG9yYWdlLlxuICAgKi9cbiAgc3RvcmVUbz86IFBpY2tlclN0b3JlT3B0aW9ucztcbiAgLyoqXG4gICAqIFNwZWNpZnkgb3B0aW9ucyBmb3IgaW1hZ2VzIHBhc3NlZCB0byB0aGUgY3JvcCBVSS5cbiAgICovXG4gIHRyYW5zZm9ybWF0aW9ucz86IFBpY2tlclRyYW5zZm9ybWF0aW9uT3B0aW9ucztcbiAgLyoqXG4gICAqIE9wdGlvbnMgZm9yIGxvY2FsIGZpbGUgdXBsb2Fkcy5cbiAgICovXG4gIHVwbG9hZENvbmZpZz86IFVwbG9hZE9wdGlvbnM7XG4gIC8qKlxuICAgKiBTdGFydCB1cGxvYWRpbmcgaW1tZWRpYXRlbHkgb24gZmlsZSBzZWxlY3Rpb24uIERlZmF1bHRzIHRvIGB0cnVlYC5cbiAgICogQGltcG9ydGFudCBUaGUgZmVhdHVyZSBpcyBjYW4gYmUgZW5hYmxlZCBvbmx5IGlmIGNyb3AgaXMgZGlzYWJsZWQgLSBkaXNhYmxlVHJhbnNmb3JtZXI6IHRydWVcbiAgICovXG4gIHVwbG9hZEluQmFja2dyb3VuZD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBTZXRzIHRoZSByZXNvbHV0aW9uIG9mIHJlY29yZGVkIHZpZGVvLiBPbmUgb2YgXCIzMjB4MjQwXCIsIFwiNjQweDQ4MFwiIG9yIFwiMTI4MHg3MjBcIi4gRGVmYXVsdCBpcyBgXCI2NDB4NDgwXCJgLlxuICAgKi9cbiAgdmlkZW9SZXNvbHV0aW9uPzogc3RyaW5nO1xuICAvKipcbiAgICogVXNlIFNlbnRyeSBCcmVhZGNydW1icyBtZWNoYW5pc20gdG8gbG9nIGluZm9ybWF0aW9uIGFib3V0IG9jY3VyZWQgZXJyb3JzLlxuICAgKiBJdCBjYW4gb3ZlcnJpZGUgZ2xvYmFsIG9iamVjdHMgbGlrZSBjb25zb2xlLCBlcnJvciBldGMuIERlZmF1bHRzIHRvIGB0cnVlYC5cbiAgICovXG4gIHVzZVNlbnRyeUJyZWFkY3J1bWJzPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hpY2ggUGlja2VyIGluc3RhbmNlIHNob3VsZCByZXNwb25kIHRvIHBhc3RlIGV2ZW50LlxuICAgKiBCeSBkZWZhdWx0IG9ubHkgaG92ZXJlZCBpbnN0YW5jZSByZXNwb25kcyB0byBldmVudC5cbiAgICogQHBhcmFtIHtib29sZWFuID0gZmFsc2V9IHBhc3RlVG9GaXJzdEluVmlld1BvcnQgSWYgbm9uZSBpbnN0YW5jZSBpcyBob3ZlcmVkIHRha2UgZmlyc3QgcGlja2VyIGluc3RhbmNlIGZ1bGx5IHZpc2libGUgaW4gdmlld3BvcnRcbiAgICogQHBhcmFtIHtib29sZWFuID0gZmFsc2V9IHBhc3RlVG9GaXJzdEluc3RhbmNlIElmIG5vbmUgaW5zdGFuY2UgaXMgaG92ZXJlZCB0YWtlIGZpcnN0IHBpY2tlciBpbnN0YW5jZSB0aGF0IGlzIGluaXRpYWxpemVkXG4gICAqIEBwYXN0ZVRvRmlyc3RJblZpZXdQb3J0IGlzIGNoZWNrZWQgZmlyc3RcbiAgICovXG4gIHBhc3RlTW9kZT86IHtcbiAgICBwYXN0ZVRvRmlyc3RJblZpZXdQb3J0PzogYm9vbGVhbixcbiAgICBwYXN0ZVRvRmlyc3RJbnN0YW5jZT86IGJvb2xlYW5cbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQaWNrZXJDcm9wT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBNYWludGFpbiBhc3BlY3QgcmF0aW8gZm9yIGNyb3Agc2VsZWN0aW9uLiAoZS5nLiAxNi85LCA4MDAvNjAwKS5cbiAgICovXG4gIGFzcGVjdFJhdGlvPzogbnVtYmVyO1xuICAvKipcbiAgICogRm9yY2UgYWxsIGltYWdlcyB0byBiZSBjcm9wcGVkIGJlZm9yZSB1cGxvYWRpbmcuXG4gICAqL1xuICBmb3JjZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGlja2VyVHJhbnNmb3JtYXRpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIEVuYWJsZSBjcm9wLiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gICAqL1xuICBjcm9wPzogYm9vbGVhbiB8IFBpY2tlckNyb3BPcHRpb25zO1xuICAvKipcbiAgICogRW5hYmxlIGNpcmNsZSBjcm9wLiBEaXNhYmxlZCBpZiBjcm9wLmFzcGVjdFJhdGlvIGlzIGRlZmluZWQgYW5kIG5vdCAxLiBDb252ZXJ0cyB0byBQTkcuIERlZmF1bHRzIHRvIGB0cnVlYC5cbiAgICovXG4gIGNpcmNsZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBFbmFibGUgaW1hZ2Ugcm90YXRpb24uIERlZmF1bHRzIHRvIGB0cnVlYC5cbiAgICovXG4gIHJvdGF0ZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEdsb2JhbCBmb3JjZSBjcm9wIG9wdGlvbi4gQ2FuIGJlIHVzZSBpZSB3aXRoIGNpcmNsZVxuICAgKi9cbiAgZm9yY2U/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBpY2tlckFjY2VwdEZuT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBQcm92aWRlZCBhY2NlcHQgc3RyaW5nXG4gICAqL1xuICBhY2NlcHQ6IHN0cmluZ1tdO1xuICAvKipcbiAgICogQWNjZXB0IHN0cmluZyBjb252ZXJ0ZWQgdG8gbWltZXR5cGVcbiAgICovXG4gIGFjY2VwdE1pbWU6IHN0cmluZ1tdO1xuICAvKipcbiAgICogTWltZXR5cGUgYmFzZWQgbWFnaWMgYnl0ZXNcbiAgICoge0BsaW5rIGh0dHBzOi8vZmlsZXN0YWNrLmdpdGh1Yi5pby9maWxlc3RhY2stanMvZ2xvYmFscy5odG1sI2dldG1pbWV0eXBlfVxuICAgKi9cbiAgbWltZUZyb21NYWdpY0J5dGVzOiBQcm9taXNlPHN0cmluZz47XG4gIC8qKlxuICAgKiBNaW1ldHlwZSBiYXNlZCBvbiBmaWxlIGV4dGVuc2lvblxuICAgKiB7QGxpbmsgaHR0cHM6Ly9maWxlc3RhY2suZ2l0aHViLmlvL2ZpbGVzdGFjay1qcy9nbG9iYWxzLmh0bWwjZXh0ZW5zaW9udG9taW1lfVxuICAgKi9cbiAgbWltZUZyb21FeHRlbnNpb246IHN0cmluZztcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQSBzeW5jaHJvbm91cy1sb29raW5nIHdyYXBwZXIgZm9yIGxvYWRpbmcgdGhlIHBpY2tlciBhbmQgY2FsbGluZyBpdHMgbWV0aG9kcy5cbiAqIFRoaXMgaXMgY3VycmVudGx5IG5lZWRlZCBiZWNhdXNlIHRoZSBwaWNrZXIgbW9kdWxlIGlzIGxvYWRlZCBhc3luY2hyb25vdXNseS5cbiAqIEV2ZW50dWFsbHkgd2Ugc2hvdWxkIG9mZmVyIGEgYnVuZGxlIHdpdGggdGhlIHBpY2tlciBtb2R1bGUgaW5jbHVkZWQuXG4gKi9cbmNsYXNzIFBpY2tlckxvYWRlciB7XG5cbiAgcHJpdmF0ZSBfaW5pdGlhbGl6ZWQ6IFByb21pc2U8UGlja2VySW5zdGFuY2U+O1xuICBjb25zdHJ1Y3RvcihjbGllbnQ6IENsaWVudCwgb3B0aW9ucz86IFBpY2tlck9wdGlvbnMpIHtcbiAgICBjb25zdCB2YWxpZGF0ZVJlcyA9IGdldFZhbGlkYXRvcihQaWNrZXJQYXJhbXNTY2hlbWEpKG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbGlkYXRlUmVzLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBGaWxlc3RhY2tFcnJvcihgSW52YWxpZCBwaWNrZXIgcGFyYW1zYCwgdmFsaWRhdGVSZXMuZXJyb3JzLCBGaWxlc3RhY2tFcnJvclR5cGUuVkFMSURBVElPTik7XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0aGlzLmxvYWRNb2R1bGUoY2xpZW50LCBvcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIG9wZW4oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgcGlja2VyID0gYXdhaXQgdGhpcy5faW5pdGlhbGl6ZWQ7XG4gICAgYXdhaXQgcGlja2VyLm9wZW4oKTtcbiAgfVxuXG4gIGFzeW5jIGNyb3AoZmlsZXM6IGFueVtdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgcGlja2VyID0gYXdhaXQgdGhpcy5faW5pdGlhbGl6ZWQ7XG4gICAgYXdhaXQgcGlja2VyLmNyb3AoZmlsZXMpO1xuICB9XG5cbiAgYXN5bmMgY2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgcGlja2VyID0gYXdhaXQgdGhpcy5faW5pdGlhbGl6ZWQ7XG4gICAgYXdhaXQgcGlja2VyLmNsb3NlKCk7XG4gIH1cblxuICBhc3luYyBjYW5jZWwoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgcGlja2VyID0gYXdhaXQgdGhpcy5faW5pdGlhbGl6ZWQ7XG4gICAgYXdhaXQgcGlja2VyLmNhbmNlbCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsb2FkTW9kdWxlKGNsaWVudDogQ2xpZW50LCBvcHRpb25zPzogUGlja2VyT3B0aW9ucyk6IFByb21pc2U8UGlja2VySW5zdGFuY2U+IHtcbiAgICBjb25zdCB7IHNlc3Npb246IHsgdXJsczogeyBwaWNrZXJVcmw6IHVybCB9IH0gfSA9IGNsaWVudDtcbiAgICBjb25zdCBQaWNrZXIgPSBhd2FpdCBsb2FkTW9kdWxlKEZJTEVTVEFDS19NT0RVTEVTLlBJQ0tFUiwgdXJsKTtcbiAgICByZXR1cm4gbmV3IFBpY2tlcihjbGllbnQsIG9wdGlvbnMpO1xuICB9XG59XG5cbi8qKlxuICogTG9hZHMgYW5kIGNyZWF0ZXMgcGlja2VyIGluc3RhbmNlXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSBjbGllbnRcbiAqIEBwYXJhbSBvcHRpb25zXG4gKi9cbmV4cG9ydCBjb25zdCBwaWNrZXIgPSAoY2xpZW50OiBDbGllbnQsIG9wdGlvbnM/OiBQaWNrZXJPcHRpb25zKTogUGlja2VySW5zdGFuY2UgPT4ge1xuICByZXR1cm4gbmV3IFBpY2tlckxvYWRlcihjbGllbnQsIG9wdGlvbnMpO1xufTtcbiJdfQ==
