"use strict";
/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var token_1 = require("./token");
describe('Request/Token', function () {
    describe('cancel', function () {
        var token = new token_1.FsCancelToken();
        it('cancel token should return undefined without value', function () { return expect(token.cancel()).toEqual(undefined); });
    });
    describe('cancel', function () {
        var token = new token_1.FsCancelToken();
        // @ts-ignore
        it("cancel token should return undefined with value new String('Aborted')", function () { return expect(token.cancel(new String('Aborted'))).toEqual(undefined); });
    });
    describe('source token', function () {
        it('Cancel event should be called', function (done) {
            var token = new token_1.FsCancelToken();
            var cancelSpy = jest.fn().mockName('cancelSpy');
            token.once('cancel', cancelSpy);
            token.cancel();
            setTimeout(function () {
                expect(cancelSpy).toHaveBeenCalled();
                done();
            }, 10);
        });
    });
    it('Cancel event should be called with reason', function (done) {
        var token = new token_1.FsCancelToken();
        var cancelSpy = jest.fn().mockName('cancelSpy');
        var cancelReason = 'test';
        token.once('cancel', cancelSpy);
        token.cancel(cancelReason);
        setTimeout(function () {
            expect(cancelSpy).toHaveBeenCalledWith(cancelReason);
            done();
        }, 10);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC90b2tlbi5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7O0FBRUgsaUNBQXdDO0FBRXhDLFFBQVEsQ0FBQyxlQUFlLEVBQUU7SUFDeEIsUUFBUSxDQUFDLFFBQVEsRUFBRTtRQUNqQixJQUFNLEtBQUssR0FBRyxJQUFJLHFCQUFhLEVBQUUsQ0FBQztRQUNsQyxFQUFFLENBQUMsb0RBQW9ELEVBQUUsY0FBTSxPQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQXpDLENBQXlDLENBQUMsQ0FBQztJQUM1RyxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFDakIsSUFBTSxLQUFLLEdBQUcsSUFBSSxxQkFBYSxFQUFFLENBQUM7UUFDbEMsYUFBYTtRQUNiLEVBQUUsQ0FBQyx1RUFBdUUsRUFBRSxjQUFNLE9BQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBOUQsQ0FBOEQsQ0FBQyxDQUFDO0lBQ3BKLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGNBQWMsRUFBRTtRQUN2QixFQUFFLENBQUMsK0JBQStCLEVBQUUsVUFBQSxJQUFJO1lBQ3RDLElBQU0sS0FBSyxHQUFHLElBQUkscUJBQWEsRUFBRSxDQUFDO1lBQ2xDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFbEQsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDaEMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBRWYsVUFBVSxDQUFDO2dCQUNULE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2dCQUNyQyxJQUFJLEVBQUUsQ0FBQztZQUNULENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNULENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkNBQTJDLEVBQUUsVUFBQSxJQUFJO1FBQ2xELElBQU0sS0FBSyxHQUFHLElBQUkscUJBQWEsRUFBRSxDQUFDO1FBQ2xDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbEQsSUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDO1FBRTVCLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFM0IsVUFBVSxDQUFDO1lBQ1QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3JELElBQUksRUFBRSxDQUFDO1FBQ1QsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJsaWIvcmVxdWVzdC90b2tlbi5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOSBieSBGaWxlc3RhY2suXG4gKiBTb21lIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRnNDYW5jZWxUb2tlbiB9IGZyb20gJy4vdG9rZW4nO1xuXG5kZXNjcmliZSgnUmVxdWVzdC9Ub2tlbicsICgpID0+IHtcbiAgZGVzY3JpYmUoJ2NhbmNlbCcsICgpID0+IHtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBGc0NhbmNlbFRva2VuKCk7XG4gICAgaXQoJ2NhbmNlbCB0b2tlbiBzaG91bGQgcmV0dXJuIHVuZGVmaW5lZCB3aXRob3V0IHZhbHVlJywgKCkgPT4gZXhwZWN0KHRva2VuLmNhbmNlbCgpKS50b0VxdWFsKHVuZGVmaW5lZCkpO1xuICB9KTtcblxuICBkZXNjcmliZSgnY2FuY2VsJywgKCkgPT4ge1xuICAgIGNvbnN0IHRva2VuID0gbmV3IEZzQ2FuY2VsVG9rZW4oKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaXQoXCJjYW5jZWwgdG9rZW4gc2hvdWxkIHJldHVybiB1bmRlZmluZWQgd2l0aCB2YWx1ZSBuZXcgU3RyaW5nKCdBYm9ydGVkJylcIiwgKCkgPT4gZXhwZWN0KHRva2VuLmNhbmNlbChuZXcgU3RyaW5nKCdBYm9ydGVkJykpKS50b0VxdWFsKHVuZGVmaW5lZCkpO1xuICB9KTtcblxuICBkZXNjcmliZSgnc291cmNlIHRva2VuJywgKCkgPT4ge1xuICAgIGl0KCdDYW5jZWwgZXZlbnQgc2hvdWxkIGJlIGNhbGxlZCcsIGRvbmUgPT4ge1xuICAgICAgY29uc3QgdG9rZW4gPSBuZXcgRnNDYW5jZWxUb2tlbigpO1xuICAgICAgY29uc3QgY2FuY2VsU3B5ID0gamVzdC5mbigpLm1vY2tOYW1lKCdjYW5jZWxTcHknKTtcblxuICAgICAgdG9rZW4ub25jZSgnY2FuY2VsJywgY2FuY2VsU3B5KTtcbiAgICAgIHRva2VuLmNhbmNlbCgpO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZXhwZWN0KGNhbmNlbFNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCAxMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdDYW5jZWwgZXZlbnQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHJlYXNvbicsIGRvbmUgPT4ge1xuICAgIGNvbnN0IHRva2VuID0gbmV3IEZzQ2FuY2VsVG9rZW4oKTtcbiAgICBjb25zdCBjYW5jZWxTcHkgPSBqZXN0LmZuKCkubW9ja05hbWUoJ2NhbmNlbFNweScpO1xuICAgIGNvbnN0IGNhbmNlbFJlYXNvbiA9ICd0ZXN0JztcblxuICAgIHRva2VuLm9uY2UoJ2NhbmNlbCcsIGNhbmNlbFNweSk7XG4gICAgdG9rZW4uY2FuY2VsKGNhbmNlbFJlYXNvbik7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGV4cGVjdChjYW5jZWxTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNhbmNlbFJlYXNvbik7XG4gICAgICBkb25lKCk7XG4gICAgfSwgMTApO1xuICB9KTtcbn0pO1xuIl19
