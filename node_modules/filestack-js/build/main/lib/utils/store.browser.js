"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var debug_1 = require("debug");
var store_1 = require("./store");
var debug = debug_1.default('fs:storage');
var Store = /** @class */ (function () {
    function Store() {
        this.availableTypes = [];
        if (window.localStorage !== undefined) {
            this.availableTypes.push(store_1.STORE_TYPE.LOCAL);
            debug('Local storage exists');
        }
        if (window.sessionStorage !== undefined) {
            this.availableTypes.push(store_1.STORE_TYPE.SESSION);
            debug('Session storage exists');
        }
        debug('availableTypes - %O', this.availableTypes);
    }
    Store.prototype.hasAccess = function (prefType) {
        debug('Checking access to storage for %s. Available types: %O', prefType, this.availableTypes);
        if (prefType) {
            return this.availableTypes.indexOf(prefType) > -1;
        }
        return !!this.availableTypes.length;
    };
    Store.prototype.getItem = function (key, prefType) {
        var store = this.getStore(prefType);
        debug('getItem %s from %O', key, store);
        if (!store) {
            return undefined;
        }
        return store.getItem(key);
    };
    Store.prototype.setItem = function (key, value, prefType) {
        var store = this.getStore(prefType);
        debug('setItem %s to %O', key, store);
        if (!store) {
            return undefined;
        }
        return store.setItem(key, value);
    };
    Store.prototype.removeItem = function (key, prefType) {
        var store = this.getStore(prefType);
        debug('removeItem %s from %O', key, store);
        if (!store) {
            return undefined;
        }
        return store.removeItem(key);
    };
    Store.prototype.getStore = function (prefType) {
        debug('get store with pref type - %s', prefType);
        if (!this.hasAccess(prefType)) {
            debug('User dont have access to any storage');
            return undefined;
        }
        switch (prefType) {
            case store_1.STORE_TYPE.LOCAL:
                return window.localStorage;
            case store_1.STORE_TYPE.SESSION:
                return window.sessionStorage;
            default:
                // @ts-ignore
                return window[this.availableTypes[0]];
        }
    };
    return Store;
}());
exports.Store = Store;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvdXRpbHMvc3RvcmUuYnJvd3Nlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILCtCQUEwQjtBQUMxQixpQ0FBcUM7QUFFckMsSUFBTSxLQUFLLEdBQUcsZUFBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRWxDO0lBSUU7UUFGUSxtQkFBYyxHQUFHLEVBQUUsQ0FBQztRQUcxQixJQUFJLE1BQU0sQ0FBQyxZQUFZLEtBQUssU0FBUyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGtCQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0MsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7U0FDL0I7UUFFRCxJQUFJLE1BQU0sQ0FBQyxjQUFjLEtBQUssU0FBUyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGtCQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0MsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDakM7UUFFRCxLQUFLLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFTSx5QkFBUyxHQUFoQixVQUFpQixRQUFxQjtRQUNwQyxLQUFLLENBQUMsd0RBQXdELEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUUvRixJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDbkQ7UUFFRCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQztJQUN0QyxDQUFDO0lBRU0sdUJBQU8sR0FBZCxVQUFlLEdBQVcsRUFBRSxRQUFxQjtRQUMvQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTSx1QkFBTyxHQUFkLFVBQWUsR0FBVyxFQUFFLEtBQWEsRUFBRSxRQUFxQjtRQUM5RCxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFdEMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sMEJBQVUsR0FBakIsVUFBa0IsR0FBVyxFQUFFLFFBQXFCO1FBQ2xELElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEMsS0FBSyxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUUzQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVPLHdCQUFRLEdBQWhCLFVBQWlCLFFBQXFCO1FBQ3BDLEtBQUssQ0FBQywrQkFBK0IsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUVqRCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM3QixLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztZQUM5QyxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUVELFFBQVEsUUFBUSxFQUFFO1lBQ2hCLEtBQUssa0JBQVUsQ0FBQyxLQUFLO2dCQUNuQixPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUM7WUFDN0IsS0FBSyxrQkFBVSxDQUFDLE9BQU87Z0JBQ3JCLE9BQU8sTUFBTSxDQUFDLGNBQWMsQ0FBQztZQUMvQjtnQkFDRSxhQUFhO2dCQUNiLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQVksQ0FBQztTQUNwRDtJQUNILENBQUM7SUFDSCxZQUFDO0FBQUQsQ0EvRUEsQUErRUMsSUFBQTtBQS9FWSxzQkFBSyIsImZpbGUiOiJsaWIvdXRpbHMvc3RvcmUuYnJvd3Nlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggYnkgRmlsZXN0YWNrLlxuICogU29tZSByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgU1RPUkVfVFlQRSB9IGZyb20gJy4vc3RvcmUnO1xuXG5jb25zdCBkZWJ1ZyA9IERlYnVnKCdmczpzdG9yYWdlJyk7XG5cbmV4cG9ydCBjbGFzcyBTdG9yZSB7XG5cbiAgcHJpdmF0ZSBhdmFpbGFibGVUeXBlcyA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuYXZhaWxhYmxlVHlwZXMucHVzaChTVE9SRV9UWVBFLkxPQ0FMKTtcbiAgICAgIGRlYnVnKCdMb2NhbCBzdG9yYWdlIGV4aXN0cycpO1xuICAgIH1cblxuICAgIGlmICh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5hdmFpbGFibGVUeXBlcy5wdXNoKFNUT1JFX1RZUEUuU0VTU0lPTik7XG4gICAgICBkZWJ1ZygnU2Vzc2lvbiBzdG9yYWdlIGV4aXN0cycpO1xuICAgIH1cblxuICAgIGRlYnVnKCdhdmFpbGFibGVUeXBlcyAtICVPJywgdGhpcy5hdmFpbGFibGVUeXBlcyk7XG4gIH1cblxuICBwdWJsaWMgaGFzQWNjZXNzKHByZWZUeXBlPzogU1RPUkVfVFlQRSk6IGJvb2xlYW4ge1xuICAgIGRlYnVnKCdDaGVja2luZyBhY2Nlc3MgdG8gc3RvcmFnZSBmb3IgJXMuIEF2YWlsYWJsZSB0eXBlczogJU8nLCBwcmVmVHlwZSwgdGhpcy5hdmFpbGFibGVUeXBlcyk7XG5cbiAgICBpZiAocHJlZlR5cGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmF2YWlsYWJsZVR5cGVzLmluZGV4T2YocHJlZlR5cGUpID4gLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhdGhpcy5hdmFpbGFibGVUeXBlcy5sZW5ndGg7XG4gIH1cblxuICBwdWJsaWMgZ2V0SXRlbShrZXk6IHN0cmluZywgcHJlZlR5cGU/OiBTVE9SRV9UWVBFKSB7XG4gICAgY29uc3Qgc3RvcmUgPSB0aGlzLmdldFN0b3JlKHByZWZUeXBlKTtcbiAgICBkZWJ1ZygnZ2V0SXRlbSAlcyBmcm9tICVPJywga2V5LCBzdG9yZSk7XG5cbiAgICBpZiAoIXN0b3JlKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBzdG9yZS5nZXRJdGVtKGtleSk7XG4gIH1cblxuICBwdWJsaWMgc2V0SXRlbShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgcHJlZlR5cGU/OiBTVE9SRV9UWVBFKSB7XG4gICAgY29uc3Qgc3RvcmUgPSB0aGlzLmdldFN0b3JlKHByZWZUeXBlKTtcbiAgICBkZWJ1Zygnc2V0SXRlbSAlcyB0byAlTycsIGtleSwgc3RvcmUpO1xuXG4gICAgaWYgKCFzdG9yZSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RvcmUuc2V0SXRlbShrZXksIHZhbHVlKTtcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVJdGVtKGtleTogc3RyaW5nLCBwcmVmVHlwZT86IFNUT1JFX1RZUEUpIHtcbiAgICBjb25zdCBzdG9yZSA9IHRoaXMuZ2V0U3RvcmUocHJlZlR5cGUpO1xuICAgIGRlYnVnKCdyZW1vdmVJdGVtICVzIGZyb20gJU8nLCBrZXksIHN0b3JlKTtcblxuICAgIGlmICghc3RvcmUpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0b3JlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3RvcmUocHJlZlR5cGU/OiBTVE9SRV9UWVBFKTogZmFsc2UgfCBTdG9yYWdlIHtcbiAgICBkZWJ1ZygnZ2V0IHN0b3JlIHdpdGggcHJlZiB0eXBlIC0gJXMnLCBwcmVmVHlwZSk7XG5cbiAgICBpZiAoIXRoaXMuaGFzQWNjZXNzKHByZWZUeXBlKSkge1xuICAgICAgZGVidWcoJ1VzZXIgZG9udCBoYXZlIGFjY2VzcyB0byBhbnkgc3RvcmFnZScpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHByZWZUeXBlKSB7XG4gICAgICBjYXNlIFNUT1JFX1RZUEUuTE9DQUw6XG4gICAgICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgICAgY2FzZSBTVE9SRV9UWVBFLlNFU1NJT046XG4gICAgICAgIHJldHVybiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2U7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiB3aW5kb3dbdGhpcy5hdmFpbGFibGVUeXBlc1swXV0gYXMgU3RvcmFnZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
