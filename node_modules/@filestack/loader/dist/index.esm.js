var FilestackLoader=function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t),r.d(t,"loadModules",(function(){return i})),r.d(t,"loadModule",(function(){return s})),r.d(t,"registerModule",(function(){return l})),r.d(t,"loadCss",(function(){return u})),r.d(t,"FILESTACK_MODULES",(function(){return c}));const o={},n=(()=>{let e;e="undefined"==typeof window?o:window;let t=e.filestackInternals;return t||(t={modules:{}},e.filestackInternals=t),t.modules||(t.modules={}),t})(),a=n&&n.modules,d=(e,t,r)=>{e.detachEvent?e.detachEvent("onreadystatechange",t):e.removeEventListener(r,t,!1)},i=e=>Promise.all(e.map(({id:e,url:t})=>s(e,t))).then(t=>{const r={};return t.forEach((t,o)=>{const n=e[o];r[n.id]=t}),r}),s=(e,t)=>{if("undefined"==typeof window)return Promise.reject(new Error("Load module is working only on browser env"));if(!e)throw new Error("Module id is required");let r=a[e="fs-loader-"+e];return r||(a[e]={},r=a[e]),r.instance?Promise.resolve(r.instance):r.promise?r.promise:r.promise=new Promise((r,o)=>{const n=t=>{if("load"===t.type||/^(complete|loaded)$/.test((t.currentTarget||t.srcElement).readyState)){const i=t.currentTarget||t.srcElement;d(i,n,"load"),d(i,o,"error"),setTimeout(()=>r(a[e]?a[e].instance:void 0),10)}},i=document.createElement("script");i.id=e,!i.attachEvent||i.attachEvent.toString&&i.attachEvent.toString().indexOf("[native code")<0?(i.addEventListener("load",n,!1),i.addEventListener("onerror",o,!1)):i.attachEvent("onreadystatechange",n),i.setAttribute("crossorigin","anonymous"),i.setAttribute("charset","utf-8"),i.setAttribute("async","true"),i.src=t,document.body.appendChild(i)})},l=(e,t,r)=>{if("undefined"!=typeof window){if(!e)throw new Error("Module id is required");if(!a)throw new Error("Loader is not initialized");a[e="fs-loader-"+e]&&(a[e]={instance:t,metadata:r})}},u=e=>null!==document.querySelector(`link[href="${e}"]`)?Promise.resolve():new Promise(t=>{const r=document.getElementsByTagName("head")[0],o=document.createElement("link"),n=()=>{t(),o.removeEventListener("load",n)};o.rel="stylesheet",o.href=e,o.addEventListener("load",n),r.appendChild(o)});var c;!function(e){e.FILESTACK_SDK="filestack-sdk",e.TRANSFORMS_UI="transforms-ui",e.PICKER="picker"}(c||(c={}))}]);const _FilestackLoader$loadModules=FilestackLoader.loadModules,_FilestackLoader$loadModule=FilestackLoader.loadModule,_FilestackLoader$registerModule=FilestackLoader.registerModule,_FilestackLoader$loadCss=FilestackLoader.loadCss,_FilestackLoader$FILESTACK_MODULES=FilestackLoader.FILESTACK_MODULES;export{_FilestackLoader$loadModules as loadModules,_FilestackLoader$loadModule as loadModule,_FilestackLoader$registerModule as registerModule,_FilestackLoader$loadCss as loadCss,_FilestackLoader$FILESTACK_MODULES as FILESTACK_MODULES};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,